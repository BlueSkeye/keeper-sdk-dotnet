AccountSummary.cs(129):AccountSummaryRequest, new[]{ "SummaryVersion" }, null, null, null, null),
AccountSummary.cs(130):AccountSummaryElements, new[]{ "ClientKey", "Settings", "KeysInfo", "SyncLogs", "IsEnterpriseAdmin", "License", "Group", "Enforcements", "Images", "PersonalLicense", "FixSharedFolderRec...
AccountSummary.cs(131):DeviceInfo, new[]{ "EncryptedDeviceToken", "DeviceName", "DeviceStatus", "DevicePublicKey", "EncryptedDataKeyDoNotUse", "ClientVersion", "Username", "IpAddress", "ApproveRequestTime", "EncryptedDat...
AccountSummary.cs(132):KeysInfo, new[]{ "EncryptionParams", "EncryptedDataKey", "DataKeyBackupDate", "UserAuthUid", "EncryptedPrivateKey", "EncryptedEccPrivateKey", "EccPublicKey" }, null, null, null, null),
AccountSummary.cs(133):SyncLog, new[]{ "CountryName", "SecondsAgo", "DeviceName", "CountryCode", "DeviceUID", "IpAddress" }, null, null, null, null),
AccountSummary.cs(134):License, new[]{ "SubscriptionCode", "ProductTypeId", "ProductTypeName", "ExpirationDate", "SecondsUntilExpiration", "MaxDevices", "FilePlanType", "BytesUsed", "BytesTotal", "SecondsUntilStorageExpirat...
AccountSummary.cs(135):AddOn, new[]{ "LicenseKeyId", "Name", "ExpirationDate", "CreatedDate", "IsTrial", "Enabled", "Scanned", "FeatureDisable" }, null, null, null, null),
AccountSummary.cs(136):Settings, new[]{ "Audit", "MustPerformAccountShareBy", "ShareAccountTo", "Rules", "PasswordRulesIntro", "AutoBackupDays", "Theme", "Channel", "ChannelValue", "RsaConfigured", "EmailVerified", "Master...
AccountSummary.cs(137):KeyValue, new[]{ "Key", "Value" }, null, null, null, null),
AccountSummary.cs(138):KeyValueBoolean, new[]{ "Key", "Value" }, null, null, null, null),
AccountSummary.cs(139):KeyValueLong, new[]{ "Key", "Value" }, null, null, null, null),
AccountSummary.cs(140):Result, new[]{ "ResultCode", "Message", "Result_" }, null, null, null, null),
AccountSummary.cs(141):Enforcements, new[]{ "Strings", "Booleans", "Longs", "Jsons" }, null, null, null, null),
AccountSummary.cs(142):MissingAccountShareKey, new[]{ "RoleId", "PublicKey" }, null, null, null, null),
AccountSummary.cs(143):PasswordRule, new[]{ "RuleType", "Pattern", "Match", "Minimum", "Description", "Value" }, null, null, null, null),
AccountSummary.cs(144):SecurityKey, new[]{ "DeviceId", "DeviceName", "DateAdded", "IsValid", "DeviceRegistration" }, null, null, null, null),
AccountSummary.cs(145):DeviceRegistration, new[]{ "KeyHandle", "PublicKey", "AttestationCert", "Counter", "Compromised" }, null, null, null, null),
AccountSummary.cs(146):Group, new[]{ "Admin", "GroupVerificationCode", "Administrator" }, null, null, null, null),
AccountSummary.cs(147):Administrator, new[]{ "FirstName", "LastName", "Email", "CurrentNumberOfUsers", "NumberOfUsers", "SubscriptionCode", "ExpirationDate", "PurchaseDate" }, null, null, null, null)

APIRequest.cs(436):ApiRequest, new[]{ "EncryptedTransmissionKey", "PublicKeyId", "Locale", "EncryptedPayload", "EncryptionType", "Recaptcha", "SubEnvironment" }, null, null, null, null),
APIRequest.cs(437):ApiRequestPayload, new[]{ "Payload", "EncryptedSessionToken", "TimeToken", "ApiVersion" }, null, null, null, null),
APIRequest.cs(438):Transform, new[]{ "Key", "EncryptedDeviceToken" }, null, null, null, null),
APIRequest.cs(439):DeviceRequest, new[]{ "ClientVersion", "DeviceName" }, null, null, null, null),
APIRequest.cs(440):AuthRequest, new[]{ "ClientVersion", "Username", "EncryptedDeviceToken" }, null, null, null, null),
APIRequest.cs(441):NewUserMinimumParams, new[]{ "MinimumIterations", "PasswordMatchRegex", "PasswordMatchDescription", "IsEnterpriseDomain" }, null, null, null, null),
APIRequest.cs(442):PreLoginRequest, new[]{ "AuthRequest", "LoginType", "TwoFactorToken" }, null, null, null, null),
APIRequest.cs(443):LoginRequest, new[]{ "AuthRequest", "LoginType", "AuthenticationHashPrime", "EncryptedLoginToken", "AuthResponse", "McEnterpriseId", "PushToken", "Platform" }, null, null, null, null),
APIRequest.cs(444):DeviceResponse, new[]{ "EncryptedDeviceToken", "Status" }, null, null, null, null),
APIRequest.cs(445):Salt, new[]{ "Iterations", "Salt_", "Algorithm", "Uid", "Name" }, null, null, null, null),
APIRequest.cs(446):TwoFactorChannel, new[]{ "Type" }, null, null, null, null),
APIRequest.cs(447):StartLoginRequest, new[]{ "EncryptedDeviceToken", "Username", "ClientVersion", "MessageSessionUid", "EncryptedLoginToken", "LoginType", "McEnterpriseId", "LoginMethod", "ForceNewLogin", "Clo...
APIRequest.cs(448):LoginResponse, new[]{ "LoginState", "AccountUid", "PrimaryUsername", "EncryptedDataKey", "EncryptedDataKeyType", "EncryptedLoginToken", "EncryptedSessionToken", "SessionTokenType", "Message", "U...
APIRequest.cs(449):SsoUserInfo, new[]{ "CompanyName", "SamlRequest", "SamlRequestType", "SsoDomainName", "LoginUrl", "LogoutUrl" }, null, null, null, null),
APIRequest.cs(450):PreLoginResponse, new[]{ "DeviceStatus", "Salt", "OBSOLETEFIELD", "SsoUserInfo" }, null, null, null, null),
APIRequest.cs(451):LoginAsUserRequest, new[]{ "Username" }, null, null, null, null),
APIRequest.cs(452):LoginAsUserResponse, new[]{ "EncryptedSessionToken", "EncryptedSharedAccountKey" }, null, null, null, null),
APIRequest.cs(453):ValidateAuthHashRequest, new[]{ "PasswordMethod", "AuthResponse", "EncryptedLoginToken" }, null, null, null, null),
APIRequest.cs(454):TwoFactorChannelInfo, new[]{ "ChannelType", "ChannelUid", "ChannelName", "Challenge", "Capabilities", "PhoneNumber", "MaxExpiration", "CreatedOn" }, null, null, null, null),
APIRequest.cs(455):TwoFactorDuoStatus, new[]{ "Capabilities", "PhoneNumber", "EnrollUrl", "Message" }, null, null, null, null),
APIRequest.cs(456):TwoFactorAddRequest, new[]{ "ChannelType", "ChannelUid", "ChannelName", "PhoneNumber", "DuoPushType" }, null, null, null, null),
APIRequest.cs(457):TwoFactorRenameRequest, new[]{ "ChannelUid", "ChannelName" }, null, null, null, null),
APIRequest.cs(458):TwoFactorAddResponse, new[]{ "Challenge", "BackupKeys" }, null, null, null, null),
APIRequest.cs(459):TwoFactorDeleteRequest, new[]{ "ChannelUid" }, null, null, null, null),
APIRequest.cs(460):TwoFactorListResponse, new[]{ "Channels", "ExpireOn" }, null, null, null, null),
APIRequest.cs(461):TwoFactorUpdateExpirationRequest, new[]{ "ExpireIn" }, null, null, null, null),
APIRequest.cs(462):TwoFactorValidateRequest, new[]{ "EncryptedLoginToken", "ValueType", "Value", "ChannelUid", "ExpireIn" }, null, null, null, null),
APIRequest.cs(463):TwoFactorValidateResponse, new[]{ "EncryptedLoginToken" }, null, null, null, null),
APIRequest.cs(464):TwoFactorSendPushRequest, new[]{ "EncryptedLoginToken", "PushType", "ChannelUid", "ExpireIn" }, null, null, null, null),
APIRequest.cs(465):License, new[]{ "Created", "Expiration", "LicenseStatus", "Paid", "Message" }, null, null, null, null),
APIRequest.cs(466):OwnerlessRecord, new[]{ "RecordUid", "RecordKey", "Status" }, null, null, null, null),
APIRequest.cs(467):OwnerlessRecords, new[]{ "OwnerlessRecord" }, null, null, null, null),
APIRequest.cs(468):UserAuthRequest, new[]{ "Uid", "Salt", "Iterations", "EncryptedClientKey", "AuthHash", "EncryptedDataKey", "LoginType", "Name", "Algorithm" }, null, null, null, null),
APIRequest.cs(469):UidRequest, new[]{ "Uid" }, null, null, null, null),
APIRequest.cs(470):DeviceUpdateRequest, new[]{ "EncryptedDeviceToken", "ClientVersion", "DeviceName", "DevicePublicKey", "DeviceStatus" }, null, null, null, null),
APIRequest.cs(471):RegisterDeviceInRegionRequest, new[]{ "EncryptedDeviceToken", "ClientVersion", "DeviceName", "DevicePublicKey" }, null, null, null, null),
APIRequest.cs(472):RegistrationRequest, new[]{ "AuthRequest", "UserAuthRequest", "EncryptedClientKey", "EncryptedPrivateKey", "PublicKey", "VerificationCode", "DeprecatedAuthHashHash", "DeprecatedEncryptedCl...
APIRequest.cs(473):ConvertUserToV3Request, new[]{ "AuthRequest", "UserAuthRequest", "EncryptedClientKey", "EncryptedPrivateKey", "PublicKey" }, null, null, null, null),
APIRequest.cs(474):RevisionResponse, new[]{ "Revision" }, null, null, null, null),
APIRequest.cs(475):ChangeEmailRequest, new[]{ "NewEmail" }, null, null, null, null),
APIRequest.cs(476):ChangeEmailResponse, new[]{ "EncryptedChangeEmailToken" }, null, null, null, null),
APIRequest.cs(477):EmailVerificationLinkResponse, new[]{ "EmailVerified" }, null, null, null, null),
APIRequest.cs(478):SecurityData, new[]{ "Uid", "Data" }, null, null, null, null),
APIRequest.cs(479):SecurityDataRequest, new[]{ "RecordSecurityData", "MasterPasswordSecurityData" }, null, null, null, null),
APIRequest.cs(480):SecurityReportIncrementalData, new[]{ "EnterpriseUserId", "CurrentSecurityData", "CurrentSecurityDataRevision", "OldSecurityData", "OldSecurityDataRevision" }, null, null, null, ...
APIRequest.cs(481):SecurityReport, new[]{ "EnterpriseUserId", "EncryptedReportData", "Revision", "TwoFactor", "LastLogin", "NumberOfReusedPassword", "SecurityReportIncrementalData", "UserId" }, null, null, null, ...
APIRequest.cs(482):SecurityReportSaveRequest, new[]{ "SecurityReport" }, null, null, null, null),
APIRequest.cs(483):SecurityReportRequest, new[]{ "FromPage" }, null, null, null, null),
APIRequest.cs(484):SecurityReportResponse, new[]{ "EnterprisePrivateKey", "SecurityReport", "AsOfRevision", "FromPage", "ToPage", "Complete" }, null, null, null, null),
APIRequest.cs(485):ReusedPasswordsRequest, new[]{ "Count" }, null, null, null, null),
APIRequest.cs(486):SummaryConsoleReport, new[]{ "ReportType", "ReportData" }, null, null, null, null),
APIRequest.cs(487):ChangeToKeyTypeOne, new[]{ "ObjectType", "PrimaryUid", "SecondaryUid", "Key" }, null, null, null, null),
APIRequest.cs(488):ChangeToKeyTypeOneRequest, new[]{ "ChangeToKeyTypeOne" }, null, null, null, null),
APIRequest.cs(489):ChangeToKeyTypeOneStatus, new[]{ "Uid", "Type", "Status", "Reason" }, null, null, null, null),
APIRequest.cs(490):ChangeToKeyTypeOneResponse, new[]{ "ChangeToKeyTypeOneStatus" }, null, null, null, null),
APIRequest.cs(491):SetKey, new[]{ "Id", "Key" }, null, null, null, null),
APIRequest.cs(492):SetKeyRequest, new[]{ "Keys" }, null, null, null, null),
APIRequest.cs(493):CreateUserRequest, new[]{ "Username", "AuthVerifier", "EncryptionParams", "RsaPublicKey", "RsaEncryptedPrivateKey", "EccPublicKey", "EccEncryptedPrivateKey", "EncryptedDeviceToken", "Encrypt...
APIRequest.cs(494):NodeEnforcementAddOrUpdateRequest, new[]{ "NodeId", "Enforcement", "Value" }, null, null, null, null),
APIRequest.cs(495):NodeEnforcementRemoveRequest, new[]{ "NodeId", "Enforcement" }, null, null, null, null),
APIRequest.cs(496):ApiRequestByKey, new[]{ "KeyId", "Payload", "Username", "Locale", "SupportedLanguage", "Type" }, null, null, null, null),
APIRequest.cs(497):ApiRequestByKAtoKAKey, new[]{ "SourceRegionGroupId", "DestinationRegionGroupId", "SourceRegionName", "DestinationRegionName", "Payload", "Username", "Locale", "SupportedLanguage", "Type"...
APIRequest.cs(498):MemcacheRequest, new[]{ "Key", "UserId" }, null, null, null, null),
APIRequest.cs(499):MemcacheResponse, new[]{ "Key", "Value" }, null, null, null, null),
APIRequest.cs(500):MasterPasswordReentryRequest, new[]{ "Pbkdf2Password", "Action" }, null, null, null, null),
APIRequest.cs(501):DeviceRegistrationRequest, new[]{ "ClientVersion", "DeviceName", "DevicePublicKey" }, null, null, null, null),
APIRequest.cs(502):DeviceVerificationRequest, new[]{ "EncryptedDeviceToken", "Username", "VerificationChannel", "MessageSessionUid", "ClientVersion" }, null, null, null, null),
APIRequest.cs(503):DeviceVerificationResponse, new[]{ "EncryptedDeviceToken", "Username", "MessageSessionUid", "ClientVersion", "DeviceStatus" }, null, null, null, null),
APIRequest.cs(504):DeviceApprovalRequest, new[]{ "Email", "TwoFactorChannel", "ClientVersion", "Locale", "EncryptedDeviceToken", "TotpCode", "DeviceIp", "DeviceTokenExpireDays" }, null, null, null, null),
APIRequest.cs(505):DeviceApprovalResponse, new[]{ "EncryptedTwoFactorToken" }, null, null, null, null),
APIRequest.cs(506):ApproveDeviceRequest, new[]{ "EncryptedDeviceToken", "EncryptedDeviceDataKey", "DenyApproval", "LinkDevice" }, null, null, null, null),
APIRequest.cs(507):EnterpriseUserAliasRequest, new[]{ "EnterpriseUserId", "Alias" }, null, null, null, null),
APIRequest.cs(508):EnterpriseUserAddAliasRequest, new[]{ "EnterpriseUserId", "Alias", "Primary" }, null, null, null, null),
APIRequest.cs(509):Device, new[]{ "EncryptedDeviceToken" }, null, null, null, null),
APIRequest.cs(510):RegisterDeviceDataKeyRequest, new[]{ "EncryptedDeviceToken", "EncryptedDeviceDataKey" }, null, null, null, null),
APIRequest.cs(511):ValidateCreateUserVerificationCodeRequest, new[]{ "Username", "ClientVersion", "VerificationCode" }, null, null, null, null),
APIRequest.cs(512):ValidateDeviceVerificationCodeRequest, new[]{ "Username", "ClientVersion", "VerificationCode", "MessageSessionUid", "EncryptedDeviceToken" }, null, null, null, null),
APIRequest.cs(513):SendSessionMessageRequest, new[]{ "MessageSessionUid", "Command", "Username" }, null, null, null, null),
APIRequest.cs(514):GlobalUserAccount, new[]{ "Username", "AccountUid", "RegionName" }, null, null, null, null),
APIRequest.cs(515):AccountUsername, new[]{ "Username", "DateActive" }, null, null, null, null),
APIRequest.cs(516):SsoServiceProviderRequest, new[]{ "Name", "ClientVersion", "Locale" }, null, null, null, null),
APIRequest.cs(517):SsoServiceProviderResponse, new[]{ "Name", "SpUrl", "IsCloud", "ClientVersion" }, null, null, null, null),
APIRequest.cs(518):UserSettingRequest, new[]{ "Setting", "Value" }, null, null, null, null),
APIRequest.cs(519):ThrottleState, new[]{ "Type", "Key", "Value", "State" }, null, null, null, null),
APIRequest.cs(520):ThrottleState2, new[]{ "Key", "KeyDescription", "Value", "ValueDescription", "Identifier", "Locked", "IncludedInAllClear", "ExpireSeconds" }, null, null, null, null),
APIRequest.cs(521):DeviceInformation, new[]{ "DeviceId", "DeviceName", "ClientVersion", "LastLogin", "DeviceStatus" }, null, null, null, null),
APIRequest.cs(522):UserSetting, new[]{ "Name", "Value" }, null, null, null, null),
APIRequest.cs(523):UserDataKeyRequest, new[]{ "EnterpriseUserId" }, null, null, null, null),
APIRequest.cs(524):EnterpriseUserIdDataKeyPair, new[]{ "EnterpriseUserId", "EncryptedDataKey" }, null, null, null, null),
APIRequest.cs(525):UserDataKey, new[]{ "RoleId", "RoleKey", "PrivateKey", "EnterpriseUserIdDataKeyPairs" }, null, null, null, null),
APIRequest.cs(526):UserDataKeyResponse, new[]{ "UserDataKeys", "AccessDenied", "NoEncryptedDataKey" }, null, null, null, null),
APIRequest.cs(527):MasterPasswordRecoveryVerificationRequest, new[]{ "EncryptedLoginToken" }, null, null, null, null),
APIRequest.cs(528):GetSecurityQuestionV3Request, new[]{ "EncryptedLoginToken", "VerificationCode" }, null, null, null, null),
APIRequest.cs(529):GetSecurityQuestionV3Response, new[]{ "SecurityQuestion", "BackupKeyDate", "Salt", "Iterations" }, null, null, null, null),
APIRequest.cs(530):GetDataKeyBackupV3Request, new[]{ "EncryptedLoginToken", "VerificationCode", "SecurityAnswerHash" }, null, null, null, null),
APIRequest.cs(531):PasswordRules, new[]{ "RuleType", "Match", "Pattern", "Description", "Minimum", "Value" }, null, null, null, null),
APIRequest.cs(532):GetDataKeyBackupV3Response, new[]{ "DataKeyBackup", "DataKeyBackupDate", "PublicKey", "EncryptedPrivateKey", "ClientKey", "EncryptedSessionToken", "PasswordRules", "PasswordRulesInt...
APIRequest.cs(533):GetPublicKeysRequest, new[]{ "Usernames" }, null, null, null, null),
APIRequest.cs(534):PublicKeyResponse, new[]{ "Username", "PublicKey", "PublicEccKey", "Message", "ErrorCode" }, null, null, null, null),
APIRequest.cs(535):GetPublicKeysResponse, new[]{ "KeyResponses" }, null, null, null, null),
APIRequest.cs(536):SetEccKeyPairRequest, new[]{ "PublicKey", "EncryptedPrivateKey" }, null, null, null, null),
APIRequest.cs(537):AddAppSharesRequest, new[]{ "AppRecordUid", "Shares" }, null, null, null, null),
APIRequest.cs(538):RemoveAppSharesRequest, new[]{ "AppRecordUid", "Shares" }, null, null, null, null),
APIRequest.cs(539):AppShareAdd, new[]{ "SecretUid", "ShareType", "EncryptedSecretKey", "Editable" }, null, null, null, null),
APIRequest.cs(540):AppShare, new[]{ "SecretUid", "ShareType", "Editable", "CreatedOn" }, null, null, null, null),
APIRequest.cs(541):AddAppClientRequest, new[]{ "AppRecordUid", "EncryptedAppKey", "ClientId", "LockIp", "FirstAccessExpireOn", "AccessExpireOn", "Id" }, null, null, null, null),
APIRequest.cs(542):RemoveAppClientsRequest, new[]{ "AppRecordUid", "Clients" }, null, null, null, null),
APIRequest.cs(543):AddExternalShareRequest, new[]{ "RecordUid", "EncryptedRecordKey", "ClientId", "AccessExpireOn", "Id" }, null, null, null, null),
APIRequest.cs(544):AppClient, new[]{ "Id", "ClientId", "CreatedOn", "FirstAccess", "LastAccess", "PublicKey", "LockIp", "IpAddress", "FirstAccessExpireOn", "AccessExpireOn" }, null, null, null, null),
APIRequest.cs(545):GetAppInfoRequest, new[]{ "AppRecordUid" }, null, null, null, null),
APIRequest.cs(546):AppInfo, new[]{ "AppRecordUid", "Shares", "Clients", "IsExternalShare" }, null, null, null, null),
APIRequest.cs(547):GetAppInfoResponse, new[]{ "AppInfo" }, null, null, null, null),
APIRequest.cs(548):ApplicationSummary, new[]{ "AppRecordUid", "LastAccess", "RecordShares", "FolderShares", "FolderRecords", "ClientCount", "ExpiredClientCount" }, null, null, null, null),
APIRequest.cs(549):GetApplicationsSummaryResponse, new[]{ "ApplicationSummary" }, null, null, null, null),
APIRequest.cs(550):GetVerificationTokenRequest, new[]{ "Username" }, null, null, null, null),
APIRequest.cs(551):GetVerificationTokenResponse, new[]{ "EncryptedVerificationToken" }, null, null, null, null),
APIRequest.cs(552):SendShareInviteRequest, new[]{ "Email" }, null, null, null, null),
APIRequest.cs(553):TimeLimitedAccessRequest, new[]{ "AccountUid", "TeamUid", "RecordUid", "SharedObjectUid", "TimeLimitedAccessType", "Expiration" }, null, null, null, null),
APIRequest.cs(554):TimeLimitedAccessResponse, new[]{ "Revision" }, null, null, null, null),
APIRequest.cs(555):RequestDownloadRequest, new[]{ "FileNames" }, null, null, null, null),
APIRequest.cs(556):RequestDownloadResponse, new[]{ "Result", "Message", "Downloads" }, null, null, null, null),
APIRequest.cs(557):Download, new[]{ "FileName", "Url", "SuccessStatusCode" }, null, null, null, null),
APIRequest.cs(558):DeleteUserRequest, new[]{ "Reason" }, null, null, null, null)

BI.cs(105):ValidateSessionTokenRequest, new[]{ "EncryptedSessionToken", "ReturnMcEnterpiseIds", "Ip" }, null, null, null, null),
BI.cs(106):ValidateSessionTokenResponse, new[]{ "Username", "UserId", "EnterpriseUserId", "Status", "StatusMessage", "McEnterpriseIds", "HasMSPPermission", "DeletedMcEnterpriseIds" }, null, new[]{ typeof(global::BI...
BI.cs(107):SubscriptionStatusRequest, null, null, null, null, null),
BI.cs(108):SubscriptionStatusResponse, new[]{ "AutoRenewal", "CurrentPaymentMethod", "CheckoutLink", "LicenseCreateDate", "IsDistributor", "IsLegacyMsp", "LicenseStats" }, null, null, null, null),
BI.cs(109):LicenseStats, new[]{ "Type", "Available", "Used" }, null, new[]{ typeof(global::BI.LicenseStats.Types.Type) }, null, null),
BI.cs(110):AutoRenewal, new[]{ "NextOn", "DaysLeft", "IsTrial" }, null, null, null, null),
BI.cs(111):PaymentMethod, new[]{ "Type", "Card", "Sepa", "Paypal", "FailedBilling", "Vendor" }, null, new[]{ typeof(global::BI.PaymentMethod.Types.Type) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typ...
BI.cs(112):PaymentMethod.Types.Sepa, new[]{ "Last4", "Country" }, null, null, null, null),
BI.cs(113):PaymentMethod.Types.Paypal, null, null, null, null, null),
BI.cs(114):PaymentMethod.Types.Vendor, new[]{ "Name" }, null, null, null, null)}),
BI.cs(115):SubscriptionMspPricingRequest, null, null, null, null, null),
BI.cs(116):SubscriptionMspPricingResponse, new[]{ "Addons", "FilePlans" }, null, null, null, null),
BI.cs(117):SubscriptionMcPricingRequest, null, null, null, null, null),
BI.cs(118):SubscriptionMcPricingResponse, new[]{ "BasePlans", "Addons", "FilePlans" }, null, null, null, null),
BI.cs(119):BasePlan, new[]{ "Id", "Cost" }, null, null, null, null),
BI.cs(120):Addon, new[]{ "Id", "Cost", "AmountConsumed" }, null, null, null, null),
BI.cs(121):FilePlan, new[]{ "Id", "Cost" }, null, null, null, null),
BI.cs(122):Cost, new[]{ "Amount", "AmountPer", "Currency" }, null, new[]{ typeof(global::BI.Cost.Types.AmountPer) }, null, null),
BI.cs(123):InvoiceSearchRequest, new[]{ "Size", "StartingAfterId" }, null, null, null, null),
BI.cs(124):InvoiceSearchResponse, new[]{ "Invoices" }, null, null, null, null),
BI.cs(125):Invoice, new[]{ "Id", "InvoiceNumber", "InvoiceDate", "LicenseCount", "TotalCost", "InvoiceType" }, null, new[]{ typeof(global::BI.Invoice.Types.Type) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(...
BI.cs(126):InvoiceDownloadRequest, new[]{ "InvoiceNumber" }, null, null, null, null),
BI.cs(127):InvoiceDownloadResponse, new[]{ "Link", "FileName" }, null, null, null, null),
BI.cs(128):ReportingDailySnapshotRequest, new[]{ "Month", "Year" }, null, null, null, null),
BI.cs(129):ReportingDailySnapshotResponse, new[]{ "Records", "McEnterprises" }, null, null, null, null),
BI.cs(130):SnapshotRecord, new[]{ "Date", "McEnterpriseId", "MaxLicenseCount", "MaxFilePlanTypeId", "MaxBasePlanId", "Addons" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { ..
BI.cs(131):SnapshotMcEnterprise, new[]{ "Id", "Name" }, null, null, null, null),
BI.cs(132):MappingAddonsRequest, null, null, null, null, null),
BI.cs(133):MappingAddonsResponse, new[]{ "Addons", "FilePlans" }, null, null, null, null),
BI.cs(134):MappingItem, new[]{ "Id", "Name" }, null, null, null, null)

Breachwatch.cs(72):BreachWatchRecordRequest, new[]{ "RecordUid", "EncryptedData", "BreachWatchInfoType", "UpdateUserWhoScanned" }, null, null, null, null),
Breachwatch.cs(73):BreachWatchUpdateRequest, new[]{ "BreachWatchRecordRequest", "EncryptedData" }, null, null, null, null),
Breachwatch.cs(74):BreachWatchRecordStatus, new[]{ "RecordUid", "Status", "Reason" }, null, null, null, null),
Breachwatch.cs(75):BreachWatchUpdateResponse, new[]{ "BreachWatchRecordStatus" }, null, null, null, null),
Breachwatch.cs(76):BreachWatchTokenRequest, new[]{ "BreachWatchToken" }, null, null, null, null),
Breachwatch.cs(77):BreachWatchTokenResponse, new[]{ "BreachWatchToken", "ClientEncrypted" }, null, null, null, null),
Breachwatch.cs(78):AnonymizedTokenResponse, new[]{ "DomainToken", "EmailToken", "PasswordToken" }, null, null, null, null),
Breachwatch.cs(79):HashCheck, new[]{ "Hash1", "Euid" }, null, null, null, null),
Breachwatch.cs(80):BreachWatchStatusRequest, new[]{ "AnonymizedToken", "HashCheck", "RemovedEuid" }, null, null, null, null),
Breachwatch.cs(81):HashStatus, new[]{ "Hash1", "Euid", "BreachDetected" }, null, null, null, null),
Breachwatch.cs(82):BreachWatchStatusResponse, new[]{ "HashStatus" }, null, null, null, null),
Breachwatch.cs(83):EnterprisePublicKeyResponse, new[]{ "EnterprisePublicKey", "EnterpriseECCPublicKey" }, null, null, null, null),
Breachwatch.cs(84):FreeScanRequest, new[]{ "HashedEmail" }, null, null, null, null),
Breachwatch.cs(85):FreeScanResponse, new[]{ "EmailBreaches", "PasswordBreaches" }, null, null, null, null),
Breachwatch.cs(86):PaidUserRequest, new[]{ "Email" }, null, null, null, null),
Breachwatch.cs(87):PaidUserResponse, new[]{ "PaidUser" }, null, null, null, null),
Breachwatch.cs(88):DetailedScanRequest, new[]{ "Email" }, null, null, null, null),
Breachwatch.cs(89):UseOneTimeTokenRequest, new[]{ "Token" }, null, null, null, null),
Breachwatch.cs(90):BreachEvent, new[]{ "Site", "Email", "PasswordInBreach", "Date", "Description" }, null, null, null, null),
Breachwatch.cs(91):UseOneTimeTokenResponse, new[]{ "EmailBreaches", "PasswordBreaches", "BreachEvents", "Email" }, null, null, null, null),
Breachwatch.cs(92):OneTimeUseToken, new[]{ "Email", "Pad" }, null, null, null, null),
Breachwatch.cs(93):FreePasswordScanRequest, new[]{ "HashedPassword" }, null, null, null, null),
Breachwatch.cs(94):FreePasswordScanResponse, new[]{ "PasswordBreaches" }, null, null, null, null)

Client.cs(46):BreachWatchUpdateRequest, new[]{ "BreachWatchRecordRequest", "EncryptedData" }, null, null, null, null),
Client.cs(47):BreachWatchRecordRequest, new[]{ "RecordUid", "EncryptedData", "BreachWatchInfoType", "UpdateUserWhoScanned" }, null, null, null, null),
Client.cs(48):BreachWatchData, new[]{ "Passwords", "Emails", "Domains" }, null, null, null, null),
Client.cs(49):BWPassword, new[]{ "Value", "Resolved", "Status", "Euid" }, null, null, null, null)

ENTERPRISE
==========
ApproveUserDevice
	Enterprise.cs(487):ApproveUserDeviceRequest, new[]{ "EnterpriseUserId", "EncryptedDeviceToken", "EncryptedDeviceDataKey", "DenyApproval" }, null, null, null, null),
	Enterprise.cs(488):ApproveUserDeviceResponse, new[]{ "EnterpriseUserId", "EncryptedDeviceToken", "Failed", "Message" }, null, null, null, null),

ApproveUserDevices
	Enterprise.cs(489):ApproveUserDevicesRequest, new[]{ "DeviceRequests" }, null, null, null, null),
	Enterprise.cs(490):ApproveUserDevicesResponse, new[]{ "DeviceResponses" }, null, null, null, null),

Backup
	Enterprise.cs(528):BackupRequest, new[]{ "ContinuationToken" }, null, null, null, null),
	Enterprise.cs(532):BackupResponse, new[]{ "EnterpriseEccPrivateKey", "Users", "Records", "ContinuationToken" }, null, null, null, null),

GetComplianceRecordOwners
	Enterprise.cs(549):ComplianceRecordOwnersRequest, new[]{ "NodeIds", "IncludeNonShared" }, null, null, null, null),
	Enterprise.cs(550):ComplianceRecordOwnersResponse, new[]{ "RecordOwners" }, null, null, null, null),

GetDomainPasswordRules
	Enterprise.cs(482):DomainPasswordRulesRequest, new[]{ "Username" }, null, null, null, null),
	Enterprise.cs(486):DomainPasswordRulesResponse, new[]{ "DomainPasswordRulesFields" }, null, null, null, null),
		Enterprise.cs(483):DomainPasswordRulesFields, new[]{ "Type", "Minimum", "Maximum", "Allowed" }, null, null, null, null),

GetEnterpriseDataKeys
	Enterprise.cs(535):GetEnterpriseDataKeysRequest, new[]{ "RoleId" }, null, null, null, null),
	Enterprise.cs(536):GetEnterpriseDataKeysResponse, new[]{ "ReEncryptedRoleKey", "RoleKey", "MspKey", "EnterpriseKeys", "TreeKey" }, null, null, null, null),
		Enterprise.cs(477):ReEncryptedRoleKey, new[]{ "RoleId", "EncryptedRoleKey" }, null, null, null, null),
		Enterprise.cs(537):RoleKey, new[]{ "RoleId", "EncryptedKey", "KeyType" }, null, null, null, null),
		Enterprise.cs(538):MspKey, new[]{ "EncryptedMspTreeKey", "EncryptedMspTreeKeyType" }, null, null, null, null),
		Enterprise.cs(539):EnterpriseKeys, new[]{ "RsaPublicKey", "RsaEncryptedPrivateKey", "EccPublicKey", "EccEncryptedPrivateKey" }, null, null, null, null),
		Enterprise.cs(540):TreeKey, new[]{ "TreeKey_", "KeyTypeId" }, null, null, null, null),

GetPreliminaryComplianceData
	Enterprise.cs(552):PreliminaryComplianceDataRequest, new[]{ "EnterpriseUserIds", "IncludeNonShared", "ContinuationToken", "IncludeTotalMatchingRecordsInFirstResponse" }, null, null, null, null),
	Enterprise.cs(553):PreliminaryComplianceDataResponse, new[]{ "AuditUserData", "ContinuationToken", "HasMore", "TotalMatchingRecords" }, null, null, null, null),
		Enterprise.cs(555):AuditUserData, new[]{ "EnterpriseUserId", "AuditUserRecords", "Status" }, null, null, null, null),

GetTeamMember
	Enterprise.cs(470):GetTeamMemberRequest, new[]{ "TeamUid" }, null, null, null, null),
	Enterprise.cs(472):GetTeamMemberResponse, new[]{ "EnterpriseUser" }, null, null, null, null),
		Enterprise.cs(471):EnterpriseUser, new[]{ "EnterpriseUserId", "Email", "EnterpriseUsername", "IsShareAdmin" }, null, null, null, null),

LoginToMc
	Enterprise.cs(484):LoginToMcRequest, new[]{ "McEnterpriseId", "MessageSessionUid" }, null, null, null, null),
	Enterprise.cs(485):LoginToMcResponse, new[]{ "EncryptedSessionToken", "EncryptedTreeKey" }, null, null, null, null),

PAMModify
	Enterprise.cs(598):PAMModifyRequest, new[]{ "Operations" }, null, null, null, null),
	Enterprise.cs(603):PAMModifyResult, new[]{ "Results" }, null, null, null, null),

Enterprise.cs(469):EnterpriseKeyPairRequest, new[]{ "EnterprisePublicKey", "EncryptedEnterprisePrivateKey", "KeyType" }, null, null, null, null),
Enterprise.cs(473):EnterpriseUserIds, new[]{ "EnterpriseUserId" }, null, null, null, null),
Enterprise.cs(474):EnterprisePersonalAccount, new[]{ "Email", "OBSOLETEFIELD" }, null, null, null, null),
Enterprise.cs(475):EncryptedTeamKeyRequest, new[]{ "TeamUid", "EncryptedTeamKey", "Force" }, null, null, null, null),
Enterprise.cs(476):ReEncryptedData, new[]{ "Id", "Data" }, null, null, null, null),
Enterprise.cs(478):NodeToManagedCompanyRequest, new[]{ "CompanyId", "Nodes", "Roles", "Users", "RoleKeys", "TeamKeys" }, null, null, null, null),
Enterprise.cs(479):RoleTeam, new[]{ "RoleId", "TeamUid" }, null, null, null, null),
Enterprise.cs(480):RoleTeams, new[]{ "RoleTeam" }, null, null, null, null),
Enterprise.cs(481):EnterpriseRegistration, new[]{ "EncryptedTreeKey", "EnterpriseName", "RootNodeData", "AdminUserData", "AdminName", "RoleData", "RsaKeyPair", "NumberSeats", "EnterpriseType", "RolePublicKey", "R...
Enterprise.cs(491):EnterpriseUserDataKey, new[]{ "EnterpriseUserId", "UserEncryptedDataKey", "KeyTypeId" }, null, null, null, null),
Enterprise.cs(492):EnterpriseUserDataKeys, new[]{ "Keys" }, null, null, null, null),
Enterprise.cs(493):EnterpriseDataRequest, new[]{ "ContinuationToken" }, null, null, null, null),
Enterprise.cs(494):SpecialProvisioning, new[]{ "Url", "Name" }, null, null, null, null),
Enterprise.cs(495):GeneralDataEntity, new[]{ "EnterpriseName", "RestrictVisibility", "SpecialProvisioning", "UserPrivilege", "Distributor" }, null, null, null, null),
Enterprise.cs(496):Node, new[]{ "NodeId", "ParentId", "BridgeId", "ScimId", "LicenseId", "EncryptedData", "DuoEnabled", "RsaEnabled", "SsoServiceProviderId", "RestrictVisibility", "SsoServiceProviderIds" }, null, null, null, null)...
Enterprise.cs(497):Role, new[]{ "RoleId", "NodeId", "EncryptedData", "KeyType", "VisibleBelow", "NewUserInherit", "RoleType" }, null, null, null, null),
Enterprise.cs(498):User, new[]{ "EnterpriseUserId", "NodeId", "EncryptedData", "KeyType", "Username", "Status", "Lock", "UserId", "AccountShareExpiration", "FullName", "JobTitle" }, null, null, null, null),
Enterprise.cs(499):UserAlias, new[]{ "EnterpriseUserId", "Username" }, null, null, null, null),
Enterprise.cs(500):ComplianceReportMetaData, new[]{ "ReportUid", "NodeId", "ReportName", "DateGenerated", "RunByName", "NumberOfOwners", "NumberOfRecords" }, null, null, null, null),
Enterprise.cs(501):ManagedNode, new[]{ "RoleId", "ManagedNodeId", "CascadeNodeManagement" }, null, null, null, null),
Enterprise.cs(502):UserManagedNode, new[]{ "NodeId", "CascadeNodeManagement", "Privileges" }, null, null, null, null),
Enterprise.cs(503):UserPrivilege, new[]{ "UserManagedNodes", "EnterpriseUserId", "EncryptedData" }, null, null, null, null),
Enterprise.cs(504):RoleUser, new[]{ "RoleId", "EnterpriseUserId" }, null, null, null, null),
Enterprise.cs(505):RolePrivilege, new[]{ "ManagedNodeId", "RoleId", "PrivilegeType" }, null, null, null, null),
Enterprise.cs(506):RoleEnforcement, new[]{ "RoleId", "EnforcementType", "Value" }, null, null, null, null),
Enterprise.cs(507):Team, new[]{ "TeamUid", "Name", "NodeId", "RestrictEdit", "RestrictShare", "RestrictView", "EncryptedData", "EncryptedTeamKey" }, null, null, null, null),
Enterprise.cs(508):TeamUser, new[]{ "TeamUid", "EnterpriseUserId", "UserType" }, null, null, null, null),
Enterprise.cs(509):GetDistributorInfoResponse, new[]{ "Distributors" }, null, null, null, null),
Enterprise.cs(510):Distributor, new[]{ "Name", "MspInfos" }, null, null, null, null),
Enterprise.cs(511):MspInfo, new[]{ "EnterpriseId", "EnterpriseName", "MaxAllowedLicenses", "AllocatedLicenses", "AllowedMcProducts", "AllowedAddOns", "MaxFilePlanType", "ManagedCompanies" }, null, null, null, null),
Enterprise.cs(512):ManagedCompany, new[]{ "McEnterpriseId", "McEnterpriseName", "MspNodeId", "NumberOfSeats", "NumberOfUsers", "ProductId", "IsExpired", "TreeKey", "TreeKeyRole", "FilePlanType", "AddOns" }, null, null, n...
Enterprise.cs(513):MSPPool, new[]{ "ProductId", "Seats", "AvailableSeats", "Stash" }, null, null, null, null),
Enterprise.cs(514):MSPContact, new[]{ "EnterpriseId", "EnterpriseName" }, null, null, null, null),
Enterprise.cs(515):LicenseAddOn, new[]{ "Name", "Enabled", "IsTrial", "Expiration", "Created", "Seats", "ActivationTime", "IncludedInProduct" }, null, null, null, null),
Enterprise.cs(516):MSPPermits, new[]{ "Restricted", "MaxAllowedLicenses", "AllowedMcProducts", "AllowedAddOns", "MaxFilePlanType" }, null, null, null, null),
Enterprise.cs(517):License, new[]{ "Paid", "NumberOfSeats", "Expiration", "LicenseKeyId", "ProductTypeId", "Name", "EnterpriseLicenseId", "SeatsAllocated", "SeatsPending", "Tier", "FilePlanTypeId", "MaxBytes", "StorageExpiratio...
Enterprise.cs(518):Bridge, new[]{ "BridgeId", "NodeId", "WanIpEnforcement", "LanIpEnforcement", "Status" }, null, null, null, null),
Enterprise.cs(519):Scim, new[]{ "ScimId", "NodeId", "Status", "LastSynced", "RolePrefix", "UniqueGroups" }, null, null, null, null),
Enterprise.cs(520):EmailProvision, new[]{ "Id", "NodeId", "Domain", "Method" }, null, null, null, null),
Enterprise.cs(521):QueuedTeam, new[]{ "TeamUid", "Name", "NodeId", "EncryptedData" }, null, null, null, null),
Enterprise.cs(522):QueuedTeamUser, new[]{ "TeamUid", "Users" }, null, null, null, null),
Enterprise.cs(523):SsoService, new[]{ "SsoServiceProviderId", "NodeId", "Name", "SpUrl", "InviteNewUsers", "Active", "IsCloud" }, null, null, null, null),
Enterprise.cs(524):ReportFilterUser, new[]{ "UserId", "Email" }, null, null, null, null),
Enterprise.cs(525):DeviceRequestForAdminApproval, new[]{ "DeviceId", "EnterpriseUserId", "EncryptedDeviceToken", "DevicePublicKey", "DeviceName", "ClientVersion", "DeviceType", "Date", "IpAddress", "Locati...
Enterprise.cs(526):EnterpriseData, new[]{ "Entity", "Delete", "Data" }, null, null, null, null),
Enterprise.cs(527):EnterpriseDataResponse, new[]{ "ContinuationToken", "HasMore", "CacheStatus", "Data", "GeneralData" }, null, null, null, null),
Enterprise.cs(529):BackupRecord, new[]{ "UserId", "RecordUid", "Key", "KeyType", "Version", "Data", "Extra" }, null, null, null, null),
Enterprise.cs(530):BackupKey, new[]{ "UserId", "BackupKey_" }, null, null, null, null),
Enterprise.cs(531):BackupUser, new[]{ "UserId", "UserName", "DataKey", "DataKeyType", "PrivateKey", "TreeKey", "TreeKeyType", "BackupKeys", "PrivateECKey" }, null, null, null, null),
Enterprise.cs(533):BackupFile, new[]{ "User", "BackupUid", "FileName", "Created", "DownloadUrl" }, null, null, null, null),
Enterprise.cs(534):BackupsResponse, new[]{ "Files" }, null, null, null, null),
Enterprise.cs(541):SharedRecordResponse, new[]{ "Events" }, null, null, null, null),
Enterprise.cs(542):SharedRecordEvent, new[]{ "RecordUid", "UserName", "CanEdit", "CanReshare", "ShareFrom" }, null, null, null, null),
Enterprise.cs(543):SetRestrictVisibilityRequest, new[]{ "NodeId" }, null, null, null, null),
Enterprise.cs(544):UserAddRequest, new[]{ "EnterpriseUserId", "NodeId", "EncryptedData", "KeyType", "FullName", "JobTitle", "Email", "SuppressEmailInvite" }, null, null, null, null),
Enterprise.cs(545):UserUpdateRequest, new[]{ "Users" }, null, null, null, null),
Enterprise.cs(546):UserUpdate, new[]{ "EnterpriseUserId", "NodeId", "EncryptedData", "KeyType", "FullName", "JobTitle", "Email" }, null, null, null, null),
Enterprise.cs(547):UserUpdateResponse, new[]{ "Users" }, null, null, null, null),
Enterprise.cs(548):UserUpdateResult, new[]{ "EnterpriseUserId", "Status" }, null, null, null, null),
Enterprise.cs(551):RecordOwner, new[]{ "EnterpriseUserId", "Shared" }, null, null, null, null),
Enterprise.cs(554):AuditUserRecord, new[]{ "RecordUid", "EncryptedData", "Shared" }, null, null, null, null),
Enterprise.cs(556):ComplianceReportFilters, new[]{ "RecordTitles", "RecordUids", "JobTitles", "Urls", "EnterpriseUserIds" }, null, null, null, null),
Enterprise.cs(557):ComplianceReportRequest, new[]{ "ComplianceReportRun", "ReportName", "SaveReport" }, null, null, null, null),
Enterprise.cs(558):ComplianceReportRun, new[]{ "ReportCriteriaAndFilter", "Users", "Records" }, null, null, null, null),
Enterprise.cs(559):ComplianceReportCriteriaAndFilter, new[]{ "NodeId", "CriteriaUid", "CriteriaName", "Criteria", "Filters", "LastModified", "NodeEncryptedData" }, null, null, null, null),
Enterprise.cs(560):ComplianceReportCriteria, new[]{ "JobTitles", "EnterpriseUserIds", "IncludeNonShared" }, null, null, null, null),
Enterprise.cs(561):ComplianceReportFilter, new[]{ "RecordTitles", "RecordUids", "JobTitles", "Urls", "RecordTypes" }, null, null, null, null),
Enterprise.cs(562):ComplianceReportResponse, new[]{ "DateGenerated", "RunByUserName", "ReportName", "ReportUid", "ComplianceReportRun", "UserProfiles", "AuditTeams", "AuditRecords", "UserRecords", "SharedFolder...
Enterprise.cs(563):AuditRecord, new[]{ "RecordUid", "AuditData", "HasAttachments", "InTrash", "TreeLeft", "TreeRight" }, null, null, null, null),
Enterprise.cs(564):AuditRole, new[]{ "RoleId", "EncryptedData", "RestrictShareOutsideEnterprise", "RestrictShareAll", "RestrictShareOfAttachments", "RestrictMaskPasswordsWhileEditing", "RoleNodeManagements" }, null, null, nul...
Enterprise.cs(565):RoleNodeManagement, new[]{ "TreeLeft", "TreeRight", "Cascade", "Privileges" }, null, null, null, null),
Enterprise.cs(566):UserProfile, new[]{ "EnterpriseUserId", "FullName", "JobTitle", "Email", "RoleIds" }, null, null, null, null),
Enterprise.cs(567):RecordPermission, new[]{ "RecordUid", "PermissionBits" }, null, null, null, null),
Enterprise.cs(568):UserRecord, new[]{ "EnterpriseUserId", "RecordPermissions" }, null, null, null, null),
Enterprise.cs(569):AuditTeam, new[]{ "TeamUid", "TeamName", "RestrictEdit", "RestrictShare" }, null, null, null, null),
Enterprise.cs(570):AuditTeamUser, new[]{ "TeamUid", "EnterpriseUserIds" }, null, null, null, null),
Enterprise.cs(571):SharedFolderRecord, new[]{ "SharedFolderUid", "RecordPermissions", "ShareAdminRecords" }, null, null, null, null),
Enterprise.cs(572):ShareAdminRecord, new[]{ "EnterpriseUserId", "RecordPermissionIndexes" }, null, null, null, null),
Enterprise.cs(573):SharedFolderUser, new[]{ "SharedFolderUid", "EnterpriseUserIds" }, null, null, null, null),
Enterprise.cs(574):SharedFolderTeam, new[]{ "SharedFolderUid", "TeamUids" }, null, null, null, null),
Enterprise.cs(575):GetComplianceReportRequest, new[]{ "ReportUid" }, null, null, null, null),
Enterprise.cs(576):GetComplianceReportResponse, new[]{ "DownloadUrl" }, null, null, null, null),
Enterprise.cs(577):ComplianceReportCriteriaRequest, new[]{ "CriteriaUid" }, null, null, null, null),
Enterprise.cs(578):SaveComplianceReportCriteriaResponse, new[]{ "CriteriaUid" }, null, null, null, null),
Enterprise.cs(579):LinkedRecord, new[]{ "OwnerUid", "RecordUids" }, null, null, null, null),
Enterprise.cs(580):GetSharingAdminsRequest, new[]{ "SharedFolderUid", "RecordUid", "Username" }, null, null, null, null),
Enterprise.cs(581):UserProfileExt, new[]{ "Email", "FullName", "JobTitle", "IsMSPMCAdmin", "IsInSharedFolder", "IsShareAdminForRequestedObject", "IsShareAdminForSharedFolderOwner" }, null, null, null, null),
Enterprise.cs(582):GetSharingAdminsResponse, new[]{ "UserProfileExts" }, null, null, null, null),
Enterprise.cs(583):TeamsEnterpriseUsersAddRequest, new[]{ "Teams" }, null, null, null, null),
Enterprise.cs(584):TeamsEnterpriseUsersAddTeamRequest, new[]{ "TeamUid", "Users" }, null, null, null, null),
Enterprise.cs(585):TeamsEnterpriseUsersAddUserRequest, new[]{ "EnterpriseUserId", "UserType", "TeamKey" }, null, null, null, null),
Enterprise.cs(586):TeamsEnterpriseUsersAddResponse, new[]{ "Teams", "Revision" }, null, null, null, null),
Enterprise.cs(587):TeamsEnterpriseUsersAddTeamResponse, new[]{ "TeamUid", "Users", "Success", "Message", "ResultCode", "AdditionalInfo" }, null, null, null, null),
Enterprise.cs(588):TeamsEnterpriseUsersAddUserResponse, new[]{ "EnterpriseUserId", "Revision", "Success", "Message", "ResultCode", "AdditionalInfo" }, null, null, null, null),
Enterprise.cs(589):DomainAlias, new[]{ "Domain", "Alias", "Status", "Message" }, null, null, null, null),
Enterprise.cs(590):DomainAliasRequest, new[]{ "DomainAlias" }, null, null, null, null),
Enterprise.cs(591):DomainAliasResponse, new[]{ "DomainAlias" }, null, null, null, null),
Enterprise.cs(592):EnterpriseUsersProvisionRequest, new[]{ "Users", "ClientVersion" }, null, null, null, null),
Enterprise.cs(593):EnterpriseUsersProvision, new[]{ "EnterpriseUserId", "Username", "NodeId", "EncryptedData", "KeyType", "FullName", "JobTitle", "EnterpriseUsersDataKey", "AuthVerifier", "EncryptionParams", "R...
Enterprise.cs(594):EnterpriseUsersProvisionResponse, new[]{ "Results" }, null, null, null, null),
Enterprise.cs(595):EnterpriseUsersProvisionResult, new[]{ "EnterpriseUserId", "Code", "Message", "AdditionalInfo" }, null, null, null, null),
Enterprise.cs(596):PAMController, new[]{ "ControllerUid", "ControllerName", "DeviceToken", "DeviceName", "NodeId", "Created", "LastModified", "ApplicationUid" }, null, null, null, null),
Enterprise.cs(597):PAMControllersResponse, new[]{ "Controllers" }, null, null, null, null),
Enterprise.cs(599):PAMDataOperation, new[]{ "OperationType", "Configuration", "Element" }, null, null, null, null),
Enterprise.cs(600):PAMConfigurationData, new[]{ "ConfigurationUid", "NodeId", "ControllerUid", "Data" }, null, null, null, null),
Enterprise.cs(601):PAMElementData, new[]{ "ElementUid", "ParentUid", "Data" }, null, null, null, null),
Enterprise.cs(602):PAMElementOperationResult, new[]{ "ElementUid", "Result", "Message" }, null, null, null, null),
Enterprise.cs(604):PAMElement, new[]{ "ElementUid", "Data", "Created", "LastModified", "Children" }, null, null, null, null),
Enterprise.cs(605):PAMGenericUidRequest, new[]{ "Uid" }, null, null, null, null),
Enterprise.cs(606):PAMConfiguration, new[]{ "ConfigurationUid", "NodeId", "ControllerUid", "Data", "Created", "LastModified", "Children" }, null, null, null, null),
Enterprise.cs(607):PAMConfigurations, new[]{ "Configurations" }, null, null, null, null),
Enterprise.cs(608):RouterRecordRotationRequest, new[]{ "RecordUid", "Revision", "ConfigurationUid", "Schedule", "EnterpriseUserId" }, null, null, null, null),
Enterprise.cs(609):RecordRotation, new[]{ "RecordUid", "Revision", "ConfigurationUid", "Schedule" }, null, null, null, null),
Enterprise.cs(610):UpdateMSPPermitsRequest, new[]{ "MspEnterpriseId", "MaxAllowedLicenses", "AllowedMcProducts", "AllowedAddOns", "MaxFilePlanType" }, null, null, null, null),
Enterprise.cs(611):PAMRotateRequest, new[]{ "RequestUid", "RecordUid" }, null, null, null, null),
Enterprise.cs(612):RouterRotationInfo, new[]{ "Status", "ConfigurationUid", "ControllerUid", "ControllerName", "Cookie" }, null, null, null, null),
Enterprise.cs(613):RouterControllerMessage, new[]{ "MessageUid", "ControllerUid", "Stream", "Payload" }, null, null, null, null),
Enterprise.cs(614):RouterUserAuth, new[]{ "SessionToken", "EnterpriseUserId", "DeviceName", "DeviceToken" }, null, null, null, null),
Enterprise.cs(615):RouterDeviceAuth, new[]{ "ClientId", "ClientVersion", "EnterpriseId", "DeviceName", "DeviceToken", "ControllerName", "ControllerUid" }, null, null, null, null)

Folder.cs(129):EncryptedDataKey, new[]{ "EncryptedKey", "EncryptedKeyType" }, null, null, null, null),
Folder.cs(130):SharedFolderRecordData, new[]{ "FolderUid", "RecordUid", "UserId", "EncryptedDataKey" }, null, null, null, null),
Folder.cs(131):SharedFolderRecordDataList, new[]{ "SharedFolderRecordData" }, null, null, null, null),
Folder.cs(132):SharedFolderRecordFix, new[]{ "FolderUid", "RecordUid", "EncryptedRecordFolderKey" }, null, null, null, null),
Folder.cs(133):SharedFolderRecordFixList, new[]{ "SharedFolderRecordFix" }, null, null, null, null),
Folder.cs(134):RecordRequest, new[]{ "RecordUid", "RecordType", "RecordData", "EncryptedRecordKey", "FolderType", "HowLongAgo", "FolderUid", "EncryptedRecordFolderKey", "Extra", "NonSharedData", "FileIds" }, null, null, null,...
Folder.cs(135):RecordResponse, new[]{ "RecordUid", "Revision", "Status" }, null, null, null, null),
Folder.cs(136):SharedFolderFields, new[]{ "EncryptedFolderName", "ManageUsers", "ManageRecords", "CanEdit", "CanShare" }, null, null, null, null),
Folder.cs(137):SharedFolderFolderFields, new[]{ "SharedFolderUid" }, null, null, null, null),
Folder.cs(138):FolderRequest, new[]{ "FolderUid", "FolderType", "ParentFolderUid", "FolderData", "EncryptedFolderKey", "SharedFolderFields", "SharedFolderFolderFields" }, null, null, null, null),
Folder.cs(139):FolderResponse, new[]{ "FolderUid", "Revision", "Status" }, null, null, null, null),
Folder.cs(140):ImportFolderRecordRequest, new[]{ "FolderRequest", "RecordRequest" }, null, null, null, null),
Folder.cs(141):ImportFolderRecordResponse, new[]{ "FolderResponse", "RecordResponse" }, null, null, null, null),
Folder.cs(142):SharedFolderUpdateRecord, new[]{ "RecordUid", "SharedFolderUid", "TeamUid", "CanEdit", "CanShare", "EncryptedRecordKey", "Revision", "Expiration" }, null, null, null, null),
Folder.cs(143):SharedFolderUpdateUser, new[]{ "Username", "ManageUsers", "ManageRecords", "SharedFolderKey", "Expiration" }, null, null, null, null),
Folder.cs(144):SharedFolderUpdateTeam, new[]{ "TeamUid", "ManageUsers", "ManageRecords", "SharedFolderKey", "Expiration" }, null, null, null, null),
Folder.cs(145):SharedFolderUpdateV3Request, new[]{ "SharedFolderUpdateOperationDontUse", "SharedFolderUid", "EncryptedSharedFolderName", "Revision", "ForceUpdate", "FromTeamUid", "DefaultManageUsers", "DefaultMa...
Folder.cs(146):SharedFolderUpdateRecordStatus, new[]{ "RecordUid", "Status" }, null, null, null, null),
Folder.cs(147):SharedFolderUpdateUserStatus, new[]{ "Username", "Status" }, null, null, null, null),
Folder.cs(148):SharedFolderUpdateTeamStatus, new[]{ "TeamUid", "Status" }, null, null, null, null),
Folder.cs(149):SharedFolderUpdateV3Response, new[]{ "Revision", "SharedFolderAddRecordStatus", "SharedFolderAddUserStatus", "SharedFolderAddTeamStatus", "SharedFolderUpdateRecordStatus", "SharedFolderUpdateUser...

Push.cs(50):UserRegistrationRequest, new[]{ "MessageSessionUid", "UserId", "EnterpriseId" }, null, null, null, null),
Push.cs(51):KAToPushServerRequest, new[]{ "MessageType", "Message", "MessageSessionUid", "EncryptedDeviceToken", "UserId", "EnterpriseId" }, null, null, null, null),
Push.cs(52):WssConnectionRequest, new[]{ "MessageSessionUid", "EncryptedDeviceToken", "DeviceTimeStamp" }, null, null, null, null),
Push.cs(53):WssClientResponse, new[]{ "MessageType", "Message" }, null, null, null, null),
Push.cs(54):PushServerDeviceRegistrationRequest, new[]{ "EncryptedDeviceToken", "PushToken", "MobilePushPlatform", "TransmissionKey" }, null, null, null, null),
Push.cs(55):SnsMessage, new[]{ "MessageType", "Message" }, null, null, null, null)

Record.cs(221):RecordType, new[]{ "RecordTypeId", "Content", "Scope" }, null, null, null, null),
Record.cs(222):RecordTypesRequest, new[]{ "Standard", "User", "Enterprise" }, null, null, null, null),
Record.cs(223):RecordTypesResponse, new[]{ "RecordTypes", "StandardCounter", "UserCounter", "EnterpriseCounter" }, null, null, null, null),
Record.cs(224):RecordTypeModifyResponse, new[]{ "RecordTypeId", "Counter" }, null, null, null, null),
Record.cs(225):RecordsGetRequest, new[]{ "RecordUids", "ClientTime" }, null, null, null, null),
Record.cs(226):Record, new[]{ "RecordUid", "RecordKey", "RecordKeyType", "Data", "Extra", "Version", "ClientModifiedTime", "Revision", "FileIds" }, null, null, null, null),
Record.cs(227):FolderRecordKey, new[]{ "FolderUid", "RecordUid", "RecordKey" }, null, null, null, null),
Record.cs(228):Folder, new[]{ "FolderUid", "FolderKey", "FolderKeyType" }, null, null, null, null),
Record.cs(229):Team, new[]{ "TeamUid", "TeamKey", "TeamPrivateKey", "TeamKeyType", "Folders" }, null, null, null, null),
Record.cs(230):RecordsGetResponse, new[]{ "Records", "FolderRecordKeys", "Folders", "Teams" }, null, null, null, null),
Record.cs(231):RecordLink, new[]{ "RecordUid", "RecordKey" }, null, null, null, null),
Record.cs(232):RecordAudit, new[]{ "Version", "Data" }, null, null, null, null),
Record.cs(233):RecordAdd, new[]{ "RecordUid", "RecordKey", "ClientModifiedTime", "Data", "NonSharedData", "FolderType", "FolderUid", "FolderKey", "RecordLinks", "Audit" }, null, null, null, null),
Record.cs(234):RecordsAddRequest, new[]{ "Records", "ClientTime" }, null, null, null, null),
Record.cs(235):RecordUpdate, new[]{ "RecordUid", "ClientModifiedTime", "Revision", "Data", "NonSharedData", "RecordLinksAdd", "RecordLinksRemove", "Audit" }, null, null, null, null),
Record.cs(236):RecordsUpdateRequest, new[]{ "Records", "ClientTime" }, null, null, null, null),
Record.cs(237):RecordFileForConversion, new[]{ "RecordUid", "FileFileId", "ThumbFileId", "Data", "RecordKey", "LinkKey" }, null, null, null, null),
Record.cs(238):RecordFolderForConversion, new[]{ "FolderUid", "RecordFolderKey" }, null, null, null, null),
Record.cs(239):RecordConvertToV3, new[]{ "RecordUid", "ClientModifiedTime", "Revision", "Data", "NonSharedData", "Audit", "RecordFile", "FolderKey" }, null, null, null, null),
Record.cs(240):RecordsConvertToV3Request, new[]{ "Records", "ClientTime" }, null, null, null, null),
Record.cs(241):RecordsRemoveRequest, new[]{ "Records" }, null, null, null, null),
Record.cs(242):RecordRevert, new[]{ "RecordUid", "RevertToRevision" }, null, null, null, null),
Record.cs(243):RecordsRevertRequest, new[]{ "Records" }, null, null, null, null),
Record.cs(244):RecordLinkError, new[]{ "RecordUid", "Status", "Message" }, null, null, null, null),
Record.cs(245):RecordModifyStatus, new[]{ "RecordUid", "Status", "Message", "LinkErrors" }, null, null, null, null),
Record.cs(246):RecordsModifyResponse, new[]{ "Records", "Revision" }, null, null, null, null),
Record.cs(247):RecordAddAuditData, new[]{ "RecordUid", "Revision", "Data", "Version" }, null, null, null, null),
Record.cs(248):AddAuditDataRequest, new[]{ "Records" }, null, null, null, null),
Record.cs(249):File, new[]{ "RecordUid", "RecordKey", "Data", "FileSize", "ThumbSize" }, null, null, null, null),
Record.cs(250):FilesAddRequest, new[]{ "Files", "ClientTime" }, null, null, null, null),
Record.cs(251):FileAddStatus, new[]{ "RecordUid", "Status", "Url", "Parameters", "ThumbnailParameters", "SuccessStatusCode" }, null, null, null, null),
Record.cs(252):FilesAddResponse, new[]{ "Files", "Revision" }, null, null, null, null),
Record.cs(253):FilesGetRequest, new[]{ "RecordUids", "ForThumbnails", "EmergencyAccessAccountOwner" }, null, null, null, null),
Record.cs(254):FileGetStatus, new[]{ "RecordUid", "Status", "Url", "SuccessStatusCode", "FileKeyType" }, null, null, null, null),
Record.cs(255):FilesGetResponse, new[]{ "Files" }, null, null, null, null),
Record.cs(256):ApplicationAddRequest, new[]{ "AppUid", "RecordKey", "ClientModifiedTime", "Data" }, null, null, null, null),
Record.cs(257):GetRecordDataWithAccessInfoRequest, new[]{ "ClientTime", "RecordUid", "RecordDetailsInclude" }, null, null, null, null),
Record.cs(258):UserPermission, new[]{ "Username", "Owner", "ShareAdmin", "Sharable", "Editable", "AwaitingApproval", "Expiration", "AccountUid" }, null, null, null, null),
Record.cs(259):SharedFolderPermission, new[]{ "SharedFolderUid", "Resharable", "Editable", "Revision", "Expiration" }, null, null, null, null),
Record.cs(260):RecordData, new[]{ "Revision", "Version", "Shared", "EncryptedRecordData", "EncryptedExtraData", "ClientModifiedTime", "NonSharedData", "LinkedRecordData", "FileId", "FileSize", "ThumbnailSize", "RecordKeyType",...
Record.cs(261):RecordDataWithAccessInfo, new[]{ "RecordUid", "RecordData", "UserPermission", "SharedFolderPermission" }, null, null, null, null),
Record.cs(262):GetRecordDataWithAccessInfoResponse, new[]{ "RecordDataWithAccessInfo", "NoPermissionRecordUid" }, null, null, null, null),
Record.cs(263):IsObjectShareAdmin, new[]{ "Uid", "IsAdmin", "ObjectType" }, null, null, null, null),
Record.cs(264):AmIShareAdmin, new[]{ "IsObjectShareAdmin" }, null, null, null, null),
Record.cs(265):RecordShareUpdateRequest, new[]{ "AddSharedRecord", "UpdateSharedRecord", "RemoveSharedRecord", "Pt" }, null, null, null, null),
Record.cs(266):SharedRecord, new[]{ "ToUsername", "RecordUid", "RecordKey", "SharedFolderUid", "TeamUid", "Editable", "Shareable", "Transfer", "UseEccKey", "RemoveVaultData" }, null, null, null, null),
Record.cs(267):RecordShareUpdateResponse, new[]{ "AddSharedRecordStatus", "UpdateSharedRecordStatus", "RemoveSharedRecordStatus" }, null, null, null, null),
Record.cs(268):SharedRecordStatus, new[]{ "RecordUid", "Status", "Message", "Username" }, null, null, null, null),
Record.cs(269):GetRecordPermissionsRequest, new[]{ "RecordUids", "IsShareAdmin" }, null, null, null, null),
Record.cs(270):GetRecordPermissionsResponse, new[]{ "RecordPermissions" }, null, null, null, null),
Record.cs(271):RecordPermission, new[]{ "RecordUid", "Owner", "CanEdit", "CanShare", "CanTransfer" }, null, null, null, null),
Record.cs(272):GetShareObjectsRequest, new[]{ "StartWith", "Contains", "Filtered", "SharedFolderUid" }, null, null, null, null),
Record.cs(273):GetShareObjectsResponse, new[]{ "ShareRelationships", "ShareFamilyUsers", "ShareEnterpriseUsers", "ShareTeams", "ShareMCTeams", "ShareMCEnterpriseUsers", "ShareEnterpriseNames" }, null, null, null, ...
Record.cs(274):ShareUser, new[]{ "Username", "Fullname", "EnterpriseId", "Status", "IsShareAdmin", "IsAdminOfSharedFolderOwner" }, null, null, null, null),
Record.cs(275):ShareTeam, new[]{ "Teamname", "EnterpriseId", "TeamUid" }, null, null, null, null),
Record.cs(276):ShareEnterprise, new[]{ "Enterprisename", "EnterpriseId" }, null, null, null, null),
Record.cs(277):RecordsOnwershipTransferRequest, new[]{ "TransferRecords" }, null, null, null, null),
Record.cs(278):TransferRecord, new[]{ "Username", "RecordUid", "RecordKey", "UseEccKey" }, null, null, null, null),
Record.cs(279):RecordsOnwershipTransferResponse, new[]{ "TransferRecordStatus" }, null, null, null, null),
Record.cs(280):TransferRecordStatus, new[]{ "Username", "RecordUid", "Status", "Message" }, null, null, null, null)

Ssocloud.cs(120):SsoCloudSettingValue, new[]{ "SettingId", "SettingName", "Label", "Value", "ValueType", "LastModified", "IsFromFile", "IsEditable", "IsRequired" }, null, null, null, null),
Ssocloud.cs(121):SsoCloudSettingAction, new[]{ "SettingId", "SettingName", "Operation", "Value" }, null, null, null, null),
Ssocloud.cs(122):SsoCloudConfigurationRequest, new[]{ "SsoServiceProviderId", "SsoSpConfigurationId", "Name", "SsoAuthProtocolType", "SsoCloudSettingAction" }, null, null, null, null),
Ssocloud.cs(123):SsoCloudConfigurationResponse, new[]{ "SsoServiceProviderId", "SsoSpConfigurationId", "EnterpriseId", "Name", "Protocol", "LastModified", "SsoCloudSettingValue" }, null, null, null, null),
Ssocloud.cs(124):SsoIdpTypeRequest, new[]{ "SsoIdpTypeId", "Tag", "Label" }, null, null, null, null),
Ssocloud.cs(125):SsoIdpTypeResponse, new[]{ "SsoIdpTypeId", "Tag", "Label" }, null, null, null, null),
Ssocloud.cs(126):SsoCloudSAMLLogRequest, new[]{ "SsoServiceProviderId" }, null, null, null, null),
Ssocloud.cs(127):SsoCloudSAMLLogEntry, new[]{ "ServerTime", "Direction", "MessageType", "MessageIssued", "FromEntityId", "SamlStatus", "RelayState", "SamlContent", "IsSigned", "IsOK" }, null, null, null, null),
Ssocloud.cs(128):SsoCloudSAMLLogResponse, new[]{ "SsoServiceProviderId", "Entry" }, null, null, null, null),
Ssocloud.cs(129):SsoCloudServiceProviderUpdateRequest, new[]{ "SsoServiceProviderId", "SsoSpConfigurationId" }, null, null, null, null),
Ssocloud.cs(130):SsoCloudIdpMetadataRequest, new[]{ "SsoSpConfigurationId", "Filename", "Content" }, null, null, null, null),
Ssocloud.cs(131):SsoCloudConfigurationValidationRequest, new[]{ "SsoSpConfigurationId" }, null, null, null, null),
Ssocloud.cs(132):ValidationContent, new[]{ "SsoSpConfigurationId", "IsSuccessful", "ErrorMessage" }, null, null, null, null),
Ssocloud.cs(133):SsoCloudConfigurationValidationResponse, new[]{ "ValidationContent" }, null, null, null, null),
Ssocloud.cs(134):SsoCloudServiceProviderConfigurationListRequest, new[]{ "SsoServiceProviderId" }, null, null, null, null),
Ssocloud.cs(135):ConfigurationListItem, new[]{ "SsoSpConfigurationId", "Name", "IsSelected", "SsoServiceProviderId" }, null, null, null, null),
Ssocloud.cs(136):SsoCloudServiceProviderConfigurationListResponse, new[]{ "ConfigurationItem" }, null, null, null, null),
Ssocloud.cs(137):SsoCloudRequest, new[]{ "MessageSessionUid", "ClientVersion", "Embedded", "Json", "Dest", "IdpSessionId", "ForceLogin", "Username", "Detached" }, null, null, null, null),
Ssocloud.cs(138):SsoCloudResponse, new[]{ "Command", "MessageSessionUid", "Email", "EncryptedLoginToken", "ProviderName", "IdpSessionId", "EncryptedSessionToken", "ErrorToken" }, null, null, null, null),
Ssocloud.cs(139):SsoCloudLogRequest, new[]{ "SsoServiceProviderId", "ServiceName", "ServiceId" }, null, null, null, null),
Ssocloud.cs(140):SamlRelayState, new[]{ "MessageSessionUid", "Username", "Embedded", "Json", "DestId", "KeyId", "SupportedLanguage", "Checksum", "IsGeneratedUid", "DeviceId", "Detached" }, null, null, null, null),
Ssocloud.cs(141):SsoCloudMigrationStatusRequest, new[]{ "NodeId", "FullStatus", "IncludeMigratedUsers", "Limit" }, null, null, null, null),
Ssocloud.cs(142):SsoCloudMigrationStatusResponse, new[]{ "Success", "Message", "NodeId", "SsoConnectId", "SsoConnectName", "SsoConnectCloudId", "SsoConnectCloudName", "TotalUsersCount", "UsersMigratedCount...
Ssocloud.cs(143):SsoCloudMigrationUserInfo, new[]{ "UserId", "Email", "FullName", "IsMigrated" }, null, null, null, null)
