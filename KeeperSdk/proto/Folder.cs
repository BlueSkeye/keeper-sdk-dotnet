// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: folder.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Folder {

  /// <summary>Holder for reflection information generated from folder.proto</summary>
  public static partial class FolderReflection {

    #region Descriptor
    /// <summary>File descriptor for folder.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FolderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxmb2xkZXIucHJvdG8SBkZvbGRlciJcChBFbmNyeXB0ZWREYXRhS2V5EhQK",
            "DGVuY3J5cHRlZEtleRgBIAEoDBIyChBlbmNyeXB0ZWRLZXlUeXBlGAIgASgO",
            "MhguRm9sZGVyLkVuY3J5cHRlZEtleVR5cGUiggEKFlNoYXJlZEZvbGRlclJl",
            "Y29yZERhdGESEQoJZm9sZGVyVWlkGAEgASgMEhEKCXJlY29yZFVpZBgCIAEo",
            "DBIOCgZ1c2VySWQYAyABKAUSMgoQZW5jcnlwdGVkRGF0YUtleRgEIAMoCzIY",
            "LkZvbGRlci5FbmNyeXB0ZWREYXRhS2V5IlwKGlNoYXJlZEZvbGRlclJlY29y",
            "ZERhdGFMaXN0Ej4KFnNoYXJlZEZvbGRlclJlY29yZERhdGEYASADKAsyHi5G",
            "b2xkZXIuU2hhcmVkRm9sZGVyUmVjb3JkRGF0YSJfChVTaGFyZWRGb2xkZXJS",
            "ZWNvcmRGaXgSEQoJZm9sZGVyVWlkGAEgASgMEhEKCXJlY29yZFVpZBgCIAEo",
            "DBIgChhlbmNyeXB0ZWRSZWNvcmRGb2xkZXJLZXkYAyABKAwiWQoZU2hhcmVk",
            "Rm9sZGVyUmVjb3JkRml4TGlzdBI8ChVzaGFyZWRGb2xkZXJSZWNvcmRGaXgY",
            "ASADKAsyHS5Gb2xkZXIuU2hhcmVkRm9sZGVyUmVjb3JkRml4IqICCg1SZWNv",
            "cmRSZXF1ZXN0EhEKCXJlY29yZFVpZBgBIAEoDBImCgpyZWNvcmRUeXBlGAIg",
            "ASgOMhIuRm9sZGVyLlJlY29yZFR5cGUSEgoKcmVjb3JkRGF0YRgDIAEoDBIa",
            "ChJlbmNyeXB0ZWRSZWNvcmRLZXkYBCABKAwSJgoKZm9sZGVyVHlwZRgFIAEo",
            "DjISLkZvbGRlci5Gb2xkZXJUeXBlEhIKCmhvd0xvbmdBZ28YBiABKAMSEQoJ",
            "Zm9sZGVyVWlkGAcgASgMEiAKGGVuY3J5cHRlZFJlY29yZEZvbGRlcktleRgI",
            "IAEoDBINCgVleHRyYRgJIAEoDBIVCg1ub25TaGFyZWREYXRhGAogASgMEg8K",
            "B2ZpbGVJZHMYCyADKAMiRQoOUmVjb3JkUmVzcG9uc2USEQoJcmVjb3JkVWlk",
            "GAEgASgMEhAKCHJldmlzaW9uGAIgASgDEg4KBnN0YXR1cxgDIAEoCSKAAQoS",
            "U2hhcmVkRm9sZGVyRmllbGRzEhsKE2VuY3J5cHRlZEZvbGRlck5hbWUYASAB",
            "KAwSEwoLbWFuYWdlVXNlcnMYAiABKAgSFQoNbWFuYWdlUmVjb3JkcxgDIAEo",
            "CBIPCgdjYW5FZGl0GAQgASgIEhAKCGNhblNoYXJlGAUgASgIIjMKGFNoYXJl",
            "ZEZvbGRlckZvbGRlckZpZWxkcxIXCg9zaGFyZWRGb2xkZXJVaWQYASABKAwi",
            "jwIKDUZvbGRlclJlcXVlc3QSEQoJZm9sZGVyVWlkGAEgASgMEiYKCmZvbGRl",
            "clR5cGUYAiABKA4yEi5Gb2xkZXIuRm9sZGVyVHlwZRIXCg9wYXJlbnRGb2xk",
            "ZXJVaWQYAyABKAwSEgoKZm9sZGVyRGF0YRgEIAEoDBIaChJlbmNyeXB0ZWRG",
            "b2xkZXJLZXkYBSABKAwSNgoSc2hhcmVkRm9sZGVyRmllbGRzGAYgASgLMhou",
            "Rm9sZGVyLlNoYXJlZEZvbGRlckZpZWxkcxJCChhzaGFyZWRGb2xkZXJGb2xk",
            "ZXJGaWVsZHMYByABKAsyIC5Gb2xkZXIuU2hhcmVkRm9sZGVyRm9sZGVyRmll",
            "bGRzIkUKDkZvbGRlclJlc3BvbnNlEhEKCWZvbGRlclVpZBgBIAEoDBIQCghy",
            "ZXZpc2lvbhgCIAEoAxIOCgZzdGF0dXMYAyABKAkidwoZSW1wb3J0Rm9sZGVy",
            "UmVjb3JkUmVxdWVzdBIsCg1mb2xkZXJSZXF1ZXN0GAEgAygLMhUuRm9sZGVy",
            "LkZvbGRlclJlcXVlc3QSLAoNcmVjb3JkUmVxdWVzdBgCIAMoCzIVLkZvbGRl",
            "ci5SZWNvcmRSZXF1ZXN0InwKGkltcG9ydEZvbGRlclJlY29yZFJlc3BvbnNl",
            "Ei4KDmZvbGRlclJlc3BvbnNlGAEgAygLMhYuRm9sZGVyLkZvbGRlclJlc3Bv",
            "bnNlEi4KDnJlY29yZFJlc3BvbnNlGAIgAygLMhYuRm9sZGVyLlJlY29yZFJl",
            "c3BvbnNlKhoKClJlY29yZFR5cGUSDAoIcGFzc3dvcmQQACpeCgpGb2xkZXJU",
            "eXBlEhIKDmRlZmF1bHRfZm9sZGVyEAASDwoLdXNlcl9mb2xkZXIQARIRCg1z",
            "aGFyZWRfZm9sZGVyEAISGAoUc2hhcmVkX2ZvbGRlcl9mb2xkZXIQAypWChBF",
            "bmNyeXB0ZWRLZXlUeXBlEgoKBm5vX2tleRAAEhkKFWVuY3J5cHRlZF9ieV9k",
            "YXRhX2tleRABEhsKF2VuY3J5cHRlZF9ieV9wdWJsaWNfa2V5EAJCIgoYY29t",
            "LmtlZXBlcnNlY3VyaXR5LnByb3RvQgZGb2xkZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Folder.RecordType), typeof(global::Folder.FolderType), typeof(global::Folder.EncryptedKeyType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.EncryptedDataKey), global::Folder.EncryptedDataKey.Parser, new[]{ "EncryptedKey", "EncryptedKeyType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.SharedFolderRecordData), global::Folder.SharedFolderRecordData.Parser, new[]{ "FolderUid", "RecordUid", "UserId", "EncryptedDataKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.SharedFolderRecordDataList), global::Folder.SharedFolderRecordDataList.Parser, new[]{ "SharedFolderRecordData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.SharedFolderRecordFix), global::Folder.SharedFolderRecordFix.Parser, new[]{ "FolderUid", "RecordUid", "EncryptedRecordFolderKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.SharedFolderRecordFixList), global::Folder.SharedFolderRecordFixList.Parser, new[]{ "SharedFolderRecordFix" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.RecordRequest), global::Folder.RecordRequest.Parser, new[]{ "RecordUid", "RecordType", "RecordData", "EncryptedRecordKey", "FolderType", "HowLongAgo", "FolderUid", "EncryptedRecordFolderKey", "Extra", "NonSharedData", "FileIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.RecordResponse), global::Folder.RecordResponse.Parser, new[]{ "RecordUid", "Revision", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.SharedFolderFields), global::Folder.SharedFolderFields.Parser, new[]{ "EncryptedFolderName", "ManageUsers", "ManageRecords", "CanEdit", "CanShare" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.SharedFolderFolderFields), global::Folder.SharedFolderFolderFields.Parser, new[]{ "SharedFolderUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.FolderRequest), global::Folder.FolderRequest.Parser, new[]{ "FolderUid", "FolderType", "ParentFolderUid", "FolderData", "EncryptedFolderKey", "SharedFolderFields", "SharedFolderFolderFields" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.FolderResponse), global::Folder.FolderResponse.Parser, new[]{ "FolderUid", "Revision", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.ImportFolderRecordRequest), global::Folder.ImportFolderRecordRequest.Parser, new[]{ "FolderRequest", "RecordRequest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Folder.ImportFolderRecordResponse), global::Folder.ImportFolderRecordResponse.Parser, new[]{ "FolderResponse", "RecordResponse" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RecordType {
    [pbr::OriginalName("password")] Password = 0,
  }

  public enum FolderType {
    [pbr::OriginalName("default_folder")] DefaultFolder = 0,
    [pbr::OriginalName("user_folder")] UserFolder = 1,
    [pbr::OriginalName("shared_folder")] SharedFolder = 2,
    [pbr::OriginalName("shared_folder_folder")] SharedFolderFolder = 3,
  }

  public enum EncryptedKeyType {
    [pbr::OriginalName("no_key")] NoKey = 0,
    [pbr::OriginalName("encrypted_by_data_key")] EncryptedByDataKey = 1,
    [pbr::OriginalName("encrypted_by_public_key")] EncryptedByPublicKey = 2,
  }

  #endregion

  #region Messages
  public sealed partial class EncryptedDataKey : pb::IMessage<EncryptedDataKey> {
    private static readonly pb::MessageParser<EncryptedDataKey> _parser = new pb::MessageParser<EncryptedDataKey>(() => new EncryptedDataKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncryptedDataKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedDataKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedDataKey(EncryptedDataKey other) : this() {
      encryptedKey_ = other.encryptedKey_;
      encryptedKeyType_ = other.encryptedKeyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedDataKey Clone() {
      return new EncryptedDataKey(this);
    }

    /// <summary>Field number for the "encryptedKey" field.</summary>
    public const int EncryptedKeyFieldNumber = 1;
    private pb::ByteString encryptedKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedKey {
      get { return encryptedKey_; }
      set {
        encryptedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedKeyType" field.</summary>
    public const int EncryptedKeyTypeFieldNumber = 2;
    private global::Folder.EncryptedKeyType encryptedKeyType_ = global::Folder.EncryptedKeyType.NoKey;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Folder.EncryptedKeyType EncryptedKeyType {
      get { return encryptedKeyType_; }
      set {
        encryptedKeyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncryptedDataKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncryptedDataKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedKey != other.EncryptedKey) return false;
      if (EncryptedKeyType != other.EncryptedKeyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedKey.Length != 0) hash ^= EncryptedKey.GetHashCode();
      if (EncryptedKeyType != global::Folder.EncryptedKeyType.NoKey) hash ^= EncryptedKeyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedKey);
      }
      if (EncryptedKeyType != global::Folder.EncryptedKeyType.NoKey) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EncryptedKeyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedKey);
      }
      if (EncryptedKeyType != global::Folder.EncryptedKeyType.NoKey) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncryptedKeyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncryptedDataKey other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedKey.Length != 0) {
        EncryptedKey = other.EncryptedKey;
      }
      if (other.EncryptedKeyType != global::Folder.EncryptedKeyType.NoKey) {
        EncryptedKeyType = other.EncryptedKeyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedKey = input.ReadBytes();
            break;
          }
          case 16: {
            EncryptedKeyType = (global::Folder.EncryptedKeyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderRecordData : pb::IMessage<SharedFolderRecordData> {
    private static readonly pb::MessageParser<SharedFolderRecordData> _parser = new pb::MessageParser<SharedFolderRecordData>(() => new SharedFolderRecordData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderRecordData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordData(SharedFolderRecordData other) : this() {
      folderUid_ = other.folderUid_;
      recordUid_ = other.recordUid_;
      userId_ = other.userId_;
      encryptedDataKey_ = other.encryptedDataKey_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordData Clone() {
      return new SharedFolderRecordData(this);
    }

    /// <summary>Field number for the "folderUid" field.</summary>
    public const int FolderUidFieldNumber = 1;
    private pb::ByteString folderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FolderUid {
      get { return folderUid_; }
      set {
        folderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 2;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "encryptedDataKey" field.</summary>
    public const int EncryptedDataKeyFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Folder.EncryptedDataKey> _repeated_encryptedDataKey_codec
        = pb::FieldCodec.ForMessage(34, global::Folder.EncryptedDataKey.Parser);
    private readonly pbc::RepeatedField<global::Folder.EncryptedDataKey> encryptedDataKey_ = new pbc::RepeatedField<global::Folder.EncryptedDataKey>();
    /// <summary>
    ///in the order of encryptedRecordKey, encryptedSharedFolderKey and optional encryptedTeamKey
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Folder.EncryptedDataKey> EncryptedDataKey {
      get { return encryptedDataKey_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderRecordData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderRecordData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderUid != other.FolderUid) return false;
      if (RecordUid != other.RecordUid) return false;
      if (UserId != other.UserId) return false;
      if(!encryptedDataKey_.Equals(other.encryptedDataKey_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderUid.Length != 0) hash ^= FolderUid.GetHashCode();
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      hash ^= encryptedDataKey_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FolderUid);
      }
      if (RecordUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordUid);
      }
      if (UserId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserId);
      }
      encryptedDataKey_.WriteTo(output, _repeated_encryptedDataKey_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FolderUid);
      }
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      size += encryptedDataKey_.CalculateSize(_repeated_encryptedDataKey_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderRecordData other) {
      if (other == null) {
        return;
      }
      if (other.FolderUid.Length != 0) {
        FolderUid = other.FolderUid;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      encryptedDataKey_.Add(other.encryptedDataKey_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderUid = input.ReadBytes();
            break;
          }
          case 18: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 24: {
            UserId = input.ReadInt32();
            break;
          }
          case 34: {
            encryptedDataKey_.AddEntriesFrom(input, _repeated_encryptedDataKey_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderRecordDataList : pb::IMessage<SharedFolderRecordDataList> {
    private static readonly pb::MessageParser<SharedFolderRecordDataList> _parser = new pb::MessageParser<SharedFolderRecordDataList>(() => new SharedFolderRecordDataList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderRecordDataList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordDataList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordDataList(SharedFolderRecordDataList other) : this() {
      sharedFolderRecordData_ = other.sharedFolderRecordData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordDataList Clone() {
      return new SharedFolderRecordDataList(this);
    }

    /// <summary>Field number for the "sharedFolderRecordData" field.</summary>
    public const int SharedFolderRecordDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Folder.SharedFolderRecordData> _repeated_sharedFolderRecordData_codec
        = pb::FieldCodec.ForMessage(10, global::Folder.SharedFolderRecordData.Parser);
    private readonly pbc::RepeatedField<global::Folder.SharedFolderRecordData> sharedFolderRecordData_ = new pbc::RepeatedField<global::Folder.SharedFolderRecordData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Folder.SharedFolderRecordData> SharedFolderRecordData {
      get { return sharedFolderRecordData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderRecordDataList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderRecordDataList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sharedFolderRecordData_.Equals(other.sharedFolderRecordData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sharedFolderRecordData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sharedFolderRecordData_.WriteTo(output, _repeated_sharedFolderRecordData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sharedFolderRecordData_.CalculateSize(_repeated_sharedFolderRecordData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderRecordDataList other) {
      if (other == null) {
        return;
      }
      sharedFolderRecordData_.Add(other.sharedFolderRecordData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sharedFolderRecordData_.AddEntriesFrom(input, _repeated_sharedFolderRecordData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderRecordFix : pb::IMessage<SharedFolderRecordFix> {
    private static readonly pb::MessageParser<SharedFolderRecordFix> _parser = new pb::MessageParser<SharedFolderRecordFix>(() => new SharedFolderRecordFix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderRecordFix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordFix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordFix(SharedFolderRecordFix other) : this() {
      folderUid_ = other.folderUid_;
      recordUid_ = other.recordUid_;
      encryptedRecordFolderKey_ = other.encryptedRecordFolderKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordFix Clone() {
      return new SharedFolderRecordFix(this);
    }

    /// <summary>Field number for the "folderUid" field.</summary>
    public const int FolderUidFieldNumber = 1;
    private pb::ByteString folderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FolderUid {
      get { return folderUid_; }
      set {
        folderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 2;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedRecordFolderKey" field.</summary>
    public const int EncryptedRecordFolderKeyFieldNumber = 3;
    private pb::ByteString encryptedRecordFolderKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedRecordFolderKey {
      get { return encryptedRecordFolderKey_; }
      set {
        encryptedRecordFolderKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderRecordFix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderRecordFix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderUid != other.FolderUid) return false;
      if (RecordUid != other.RecordUid) return false;
      if (EncryptedRecordFolderKey != other.EncryptedRecordFolderKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderUid.Length != 0) hash ^= FolderUid.GetHashCode();
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (EncryptedRecordFolderKey.Length != 0) hash ^= EncryptedRecordFolderKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FolderUid);
      }
      if (RecordUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecordUid);
      }
      if (EncryptedRecordFolderKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedRecordFolderKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FolderUid);
      }
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (EncryptedRecordFolderKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedRecordFolderKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderRecordFix other) {
      if (other == null) {
        return;
      }
      if (other.FolderUid.Length != 0) {
        FolderUid = other.FolderUid;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.EncryptedRecordFolderKey.Length != 0) {
        EncryptedRecordFolderKey = other.EncryptedRecordFolderKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderUid = input.ReadBytes();
            break;
          }
          case 18: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 26: {
            EncryptedRecordFolderKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderRecordFixList : pb::IMessage<SharedFolderRecordFixList> {
    private static readonly pb::MessageParser<SharedFolderRecordFixList> _parser = new pb::MessageParser<SharedFolderRecordFixList>(() => new SharedFolderRecordFixList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderRecordFixList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordFixList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordFixList(SharedFolderRecordFixList other) : this() {
      sharedFolderRecordFix_ = other.sharedFolderRecordFix_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderRecordFixList Clone() {
      return new SharedFolderRecordFixList(this);
    }

    /// <summary>Field number for the "sharedFolderRecordFix" field.</summary>
    public const int SharedFolderRecordFixFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Folder.SharedFolderRecordFix> _repeated_sharedFolderRecordFix_codec
        = pb::FieldCodec.ForMessage(10, global::Folder.SharedFolderRecordFix.Parser);
    private readonly pbc::RepeatedField<global::Folder.SharedFolderRecordFix> sharedFolderRecordFix_ = new pbc::RepeatedField<global::Folder.SharedFolderRecordFix>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Folder.SharedFolderRecordFix> SharedFolderRecordFix {
      get { return sharedFolderRecordFix_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderRecordFixList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderRecordFixList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sharedFolderRecordFix_.Equals(other.sharedFolderRecordFix_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sharedFolderRecordFix_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sharedFolderRecordFix_.WriteTo(output, _repeated_sharedFolderRecordFix_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sharedFolderRecordFix_.CalculateSize(_repeated_sharedFolderRecordFix_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderRecordFixList other) {
      if (other == null) {
        return;
      }
      sharedFolderRecordFix_.Add(other.sharedFolderRecordFix_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sharedFolderRecordFix_.AddEntriesFrom(input, _repeated_sharedFolderRecordFix_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordRequest : pb::IMessage<RecordRequest> {
    private static readonly pb::MessageParser<RecordRequest> _parser = new pb::MessageParser<RecordRequest>(() => new RecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordRequest(RecordRequest other) : this() {
      recordUid_ = other.recordUid_;
      recordType_ = other.recordType_;
      recordData_ = other.recordData_;
      encryptedRecordKey_ = other.encryptedRecordKey_;
      folderType_ = other.folderType_;
      howLongAgo_ = other.howLongAgo_;
      folderUid_ = other.folderUid_;
      encryptedRecordFolderKey_ = other.encryptedRecordFolderKey_;
      extra_ = other.extra_;
      nonSharedData_ = other.nonSharedData_;
      fileIds_ = other.fileIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordRequest Clone() {
      return new RecordRequest(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordType" field.</summary>
    public const int RecordTypeFieldNumber = 2;
    private global::Folder.RecordType recordType_ = global::Folder.RecordType.Password;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Folder.RecordType RecordType {
      get { return recordType_; }
      set {
        recordType_ = value;
      }
    }

    /// <summary>Field number for the "recordData" field.</summary>
    public const int RecordDataFieldNumber = 3;
    private pb::ByteString recordData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordData {
      get { return recordData_; }
      set {
        recordData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedRecordKey" field.</summary>
    public const int EncryptedRecordKeyFieldNumber = 4;
    private pb::ByteString encryptedRecordKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedRecordKey {
      get { return encryptedRecordKey_; }
      set {
        encryptedRecordKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folderType" field.</summary>
    public const int FolderTypeFieldNumber = 5;
    private global::Folder.FolderType folderType_ = global::Folder.FolderType.DefaultFolder;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Folder.FolderType FolderType {
      get { return folderType_; }
      set {
        folderType_ = value;
      }
    }

    /// <summary>Field number for the "howLongAgo" field.</summary>
    public const int HowLongAgoFieldNumber = 6;
    private long howLongAgo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HowLongAgo {
      get { return howLongAgo_; }
      set {
        howLongAgo_ = value;
      }
    }

    /// <summary>Field number for the "folderUid" field.</summary>
    public const int FolderUidFieldNumber = 7;
    private pb::ByteString folderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FolderUid {
      get { return folderUid_; }
      set {
        folderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedRecordFolderKey" field.</summary>
    public const int EncryptedRecordFolderKeyFieldNumber = 8;
    private pb::ByteString encryptedRecordFolderKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedRecordFolderKey {
      get { return encryptedRecordFolderKey_; }
      set {
        encryptedRecordFolderKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 9;
    private pb::ByteString extra_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nonSharedData" field.</summary>
    public const int NonSharedDataFieldNumber = 10;
    private pb::ByteString nonSharedData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NonSharedData {
      get { return nonSharedData_; }
      set {
        nonSharedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileIds" field.</summary>
    public const int FileIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<long> _repeated_fileIds_codec
        = pb::FieldCodec.ForInt64(90);
    private readonly pbc::RepeatedField<long> fileIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> FileIds {
      get { return fileIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (RecordType != other.RecordType) return false;
      if (RecordData != other.RecordData) return false;
      if (EncryptedRecordKey != other.EncryptedRecordKey) return false;
      if (FolderType != other.FolderType) return false;
      if (HowLongAgo != other.HowLongAgo) return false;
      if (FolderUid != other.FolderUid) return false;
      if (EncryptedRecordFolderKey != other.EncryptedRecordFolderKey) return false;
      if (Extra != other.Extra) return false;
      if (NonSharedData != other.NonSharedData) return false;
      if(!fileIds_.Equals(other.fileIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (RecordType != global::Folder.RecordType.Password) hash ^= RecordType.GetHashCode();
      if (RecordData.Length != 0) hash ^= RecordData.GetHashCode();
      if (EncryptedRecordKey.Length != 0) hash ^= EncryptedRecordKey.GetHashCode();
      if (FolderType != global::Folder.FolderType.DefaultFolder) hash ^= FolderType.GetHashCode();
      if (HowLongAgo != 0L) hash ^= HowLongAgo.GetHashCode();
      if (FolderUid.Length != 0) hash ^= FolderUid.GetHashCode();
      if (EncryptedRecordFolderKey.Length != 0) hash ^= EncryptedRecordFolderKey.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      if (NonSharedData.Length != 0) hash ^= NonSharedData.GetHashCode();
      hash ^= fileIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (RecordType != global::Folder.RecordType.Password) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RecordType);
      }
      if (RecordData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RecordData);
      }
      if (EncryptedRecordKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(EncryptedRecordKey);
      }
      if (FolderType != global::Folder.FolderType.DefaultFolder) {
        output.WriteRawTag(40);
        output.WriteEnum((int) FolderType);
      }
      if (HowLongAgo != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(HowLongAgo);
      }
      if (FolderUid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(FolderUid);
      }
      if (EncryptedRecordFolderKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(EncryptedRecordFolderKey);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Extra);
      }
      if (NonSharedData.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(NonSharedData);
      }
      fileIds_.WriteTo(output, _repeated_fileIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (RecordType != global::Folder.RecordType.Password) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordType);
      }
      if (RecordData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordData);
      }
      if (EncryptedRecordKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedRecordKey);
      }
      if (FolderType != global::Folder.FolderType.DefaultFolder) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FolderType);
      }
      if (HowLongAgo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HowLongAgo);
      }
      if (FolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FolderUid);
      }
      if (EncryptedRecordFolderKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedRecordFolderKey);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Extra);
      }
      if (NonSharedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NonSharedData);
      }
      size += fileIds_.CalculateSize(_repeated_fileIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.RecordType != global::Folder.RecordType.Password) {
        RecordType = other.RecordType;
      }
      if (other.RecordData.Length != 0) {
        RecordData = other.RecordData;
      }
      if (other.EncryptedRecordKey.Length != 0) {
        EncryptedRecordKey = other.EncryptedRecordKey;
      }
      if (other.FolderType != global::Folder.FolderType.DefaultFolder) {
        FolderType = other.FolderType;
      }
      if (other.HowLongAgo != 0L) {
        HowLongAgo = other.HowLongAgo;
      }
      if (other.FolderUid.Length != 0) {
        FolderUid = other.FolderUid;
      }
      if (other.EncryptedRecordFolderKey.Length != 0) {
        EncryptedRecordFolderKey = other.EncryptedRecordFolderKey;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
      if (other.NonSharedData.Length != 0) {
        NonSharedData = other.NonSharedData;
      }
      fileIds_.Add(other.fileIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 16: {
            RecordType = (global::Folder.RecordType) input.ReadEnum();
            break;
          }
          case 26: {
            RecordData = input.ReadBytes();
            break;
          }
          case 34: {
            EncryptedRecordKey = input.ReadBytes();
            break;
          }
          case 40: {
            FolderType = (global::Folder.FolderType) input.ReadEnum();
            break;
          }
          case 48: {
            HowLongAgo = input.ReadInt64();
            break;
          }
          case 58: {
            FolderUid = input.ReadBytes();
            break;
          }
          case 66: {
            EncryptedRecordFolderKey = input.ReadBytes();
            break;
          }
          case 74: {
            Extra = input.ReadBytes();
            break;
          }
          case 82: {
            NonSharedData = input.ReadBytes();
            break;
          }
          case 90:
          case 88: {
            fileIds_.AddEntriesFrom(input, _repeated_fileIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordResponse : pb::IMessage<RecordResponse> {
    private static readonly pb::MessageParser<RecordResponse> _parser = new pb::MessageParser<RecordResponse>(() => new RecordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordResponse(RecordResponse other) : this() {
      recordUid_ = other.recordUid_;
      revision_ = other.revision_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordResponse Clone() {
      return new RecordResponse(this);
    }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private pb::ByteString recordUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 2;
    private long revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordUid != other.RecordUid) return false;
      if (Revision != other.Revision) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordUid.Length != 0) hash ^= RecordUid.GetHashCode();
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RecordUid);
      }
      if (Revision != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Revision);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecordUid);
      }
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordResponse other) {
      if (other == null) {
        return;
      }
      if (other.RecordUid.Length != 0) {
        RecordUid = other.RecordUid;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecordUid = input.ReadBytes();
            break;
          }
          case 16: {
            Revision = input.ReadInt64();
            break;
          }
          case 26: {
            Status = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderFields : pb::IMessage<SharedFolderFields> {
    private static readonly pb::MessageParser<SharedFolderFields> _parser = new pb::MessageParser<SharedFolderFields>(() => new SharedFolderFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderFields(SharedFolderFields other) : this() {
      encryptedFolderName_ = other.encryptedFolderName_;
      manageUsers_ = other.manageUsers_;
      manageRecords_ = other.manageRecords_;
      canEdit_ = other.canEdit_;
      canShare_ = other.canShare_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderFields Clone() {
      return new SharedFolderFields(this);
    }

    /// <summary>Field number for the "encryptedFolderName" field.</summary>
    public const int EncryptedFolderNameFieldNumber = 1;
    private pb::ByteString encryptedFolderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedFolderName {
      get { return encryptedFolderName_; }
      set {
        encryptedFolderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manageUsers" field.</summary>
    public const int ManageUsersFieldNumber = 2;
    private bool manageUsers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManageUsers {
      get { return manageUsers_; }
      set {
        manageUsers_ = value;
      }
    }

    /// <summary>Field number for the "manageRecords" field.</summary>
    public const int ManageRecordsFieldNumber = 3;
    private bool manageRecords_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManageRecords {
      get { return manageRecords_; }
      set {
        manageRecords_ = value;
      }
    }

    /// <summary>Field number for the "canEdit" field.</summary>
    public const int CanEditFieldNumber = 4;
    private bool canEdit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanEdit {
      get { return canEdit_; }
      set {
        canEdit_ = value;
      }
    }

    /// <summary>Field number for the "canShare" field.</summary>
    public const int CanShareFieldNumber = 5;
    private bool canShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanShare {
      get { return canShare_; }
      set {
        canShare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncryptedFolderName != other.EncryptedFolderName) return false;
      if (ManageUsers != other.ManageUsers) return false;
      if (ManageRecords != other.ManageRecords) return false;
      if (CanEdit != other.CanEdit) return false;
      if (CanShare != other.CanShare) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncryptedFolderName.Length != 0) hash ^= EncryptedFolderName.GetHashCode();
      if (ManageUsers != false) hash ^= ManageUsers.GetHashCode();
      if (ManageRecords != false) hash ^= ManageRecords.GetHashCode();
      if (CanEdit != false) hash ^= CanEdit.GetHashCode();
      if (CanShare != false) hash ^= CanShare.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncryptedFolderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EncryptedFolderName);
      }
      if (ManageUsers != false) {
        output.WriteRawTag(16);
        output.WriteBool(ManageUsers);
      }
      if (ManageRecords != false) {
        output.WriteRawTag(24);
        output.WriteBool(ManageRecords);
      }
      if (CanEdit != false) {
        output.WriteRawTag(32);
        output.WriteBool(CanEdit);
      }
      if (CanShare != false) {
        output.WriteRawTag(40);
        output.WriteBool(CanShare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncryptedFolderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedFolderName);
      }
      if (ManageUsers != false) {
        size += 1 + 1;
      }
      if (ManageRecords != false) {
        size += 1 + 1;
      }
      if (CanEdit != false) {
        size += 1 + 1;
      }
      if (CanShare != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderFields other) {
      if (other == null) {
        return;
      }
      if (other.EncryptedFolderName.Length != 0) {
        EncryptedFolderName = other.EncryptedFolderName;
      }
      if (other.ManageUsers != false) {
        ManageUsers = other.ManageUsers;
      }
      if (other.ManageRecords != false) {
        ManageRecords = other.ManageRecords;
      }
      if (other.CanEdit != false) {
        CanEdit = other.CanEdit;
      }
      if (other.CanShare != false) {
        CanShare = other.CanShare;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncryptedFolderName = input.ReadBytes();
            break;
          }
          case 16: {
            ManageUsers = input.ReadBool();
            break;
          }
          case 24: {
            ManageRecords = input.ReadBool();
            break;
          }
          case 32: {
            CanEdit = input.ReadBool();
            break;
          }
          case 40: {
            CanShare = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SharedFolderFolderFields : pb::IMessage<SharedFolderFolderFields> {
    private static readonly pb::MessageParser<SharedFolderFolderFields> _parser = new pb::MessageParser<SharedFolderFolderFields>(() => new SharedFolderFolderFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SharedFolderFolderFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderFolderFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderFolderFields(SharedFolderFolderFields other) : this() {
      sharedFolderUid_ = other.sharedFolderUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SharedFolderFolderFields Clone() {
      return new SharedFolderFolderFields(this);
    }

    /// <summary>Field number for the "sharedFolderUid" field.</summary>
    public const int SharedFolderUidFieldNumber = 1;
    private pb::ByteString sharedFolderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SharedFolderUid {
      get { return sharedFolderUid_; }
      set {
        sharedFolderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SharedFolderFolderFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SharedFolderFolderFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SharedFolderUid != other.SharedFolderUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SharedFolderUid.Length != 0) hash ^= SharedFolderUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SharedFolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SharedFolderUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SharedFolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SharedFolderUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SharedFolderFolderFields other) {
      if (other == null) {
        return;
      }
      if (other.SharedFolderUid.Length != 0) {
        SharedFolderUid = other.SharedFolderUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SharedFolderUid = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FolderRequest : pb::IMessage<FolderRequest> {
    private static readonly pb::MessageParser<FolderRequest> _parser = new pb::MessageParser<FolderRequest>(() => new FolderRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FolderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FolderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FolderRequest(FolderRequest other) : this() {
      folderUid_ = other.folderUid_;
      folderType_ = other.folderType_;
      parentFolderUid_ = other.parentFolderUid_;
      folderData_ = other.folderData_;
      encryptedFolderKey_ = other.encryptedFolderKey_;
      sharedFolderFields_ = other.sharedFolderFields_ != null ? other.sharedFolderFields_.Clone() : null;
      sharedFolderFolderFields_ = other.sharedFolderFolderFields_ != null ? other.sharedFolderFolderFields_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FolderRequest Clone() {
      return new FolderRequest(this);
    }

    /// <summary>Field number for the "folderUid" field.</summary>
    public const int FolderUidFieldNumber = 1;
    private pb::ByteString folderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FolderUid {
      get { return folderUid_; }
      set {
        folderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folderType" field.</summary>
    public const int FolderTypeFieldNumber = 2;
    private global::Folder.FolderType folderType_ = global::Folder.FolderType.DefaultFolder;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Folder.FolderType FolderType {
      get { return folderType_; }
      set {
        folderType_ = value;
      }
    }

    /// <summary>Field number for the "parentFolderUid" field.</summary>
    public const int ParentFolderUidFieldNumber = 3;
    private pb::ByteString parentFolderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ParentFolderUid {
      get { return parentFolderUid_; }
      set {
        parentFolderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folderData" field.</summary>
    public const int FolderDataFieldNumber = 4;
    private pb::ByteString folderData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FolderData {
      get { return folderData_; }
      set {
        folderData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encryptedFolderKey" field.</summary>
    public const int EncryptedFolderKeyFieldNumber = 5;
    private pb::ByteString encryptedFolderKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedFolderKey {
      get { return encryptedFolderKey_; }
      set {
        encryptedFolderKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sharedFolderFields" field.</summary>
    public const int SharedFolderFieldsFieldNumber = 6;
    private global::Folder.SharedFolderFields sharedFolderFields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Folder.SharedFolderFields SharedFolderFields {
      get { return sharedFolderFields_; }
      set {
        sharedFolderFields_ = value;
      }
    }

    /// <summary>Field number for the "sharedFolderFolderFields" field.</summary>
    public const int SharedFolderFolderFieldsFieldNumber = 7;
    private global::Folder.SharedFolderFolderFields sharedFolderFolderFields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Folder.SharedFolderFolderFields SharedFolderFolderFields {
      get { return sharedFolderFolderFields_; }
      set {
        sharedFolderFolderFields_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FolderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FolderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderUid != other.FolderUid) return false;
      if (FolderType != other.FolderType) return false;
      if (ParentFolderUid != other.ParentFolderUid) return false;
      if (FolderData != other.FolderData) return false;
      if (EncryptedFolderKey != other.EncryptedFolderKey) return false;
      if (!object.Equals(SharedFolderFields, other.SharedFolderFields)) return false;
      if (!object.Equals(SharedFolderFolderFields, other.SharedFolderFolderFields)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderUid.Length != 0) hash ^= FolderUid.GetHashCode();
      if (FolderType != global::Folder.FolderType.DefaultFolder) hash ^= FolderType.GetHashCode();
      if (ParentFolderUid.Length != 0) hash ^= ParentFolderUid.GetHashCode();
      if (FolderData.Length != 0) hash ^= FolderData.GetHashCode();
      if (EncryptedFolderKey.Length != 0) hash ^= EncryptedFolderKey.GetHashCode();
      if (sharedFolderFields_ != null) hash ^= SharedFolderFields.GetHashCode();
      if (sharedFolderFolderFields_ != null) hash ^= SharedFolderFolderFields.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FolderUid);
      }
      if (FolderType != global::Folder.FolderType.DefaultFolder) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FolderType);
      }
      if (ParentFolderUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ParentFolderUid);
      }
      if (FolderData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(FolderData);
      }
      if (EncryptedFolderKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EncryptedFolderKey);
      }
      if (sharedFolderFields_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SharedFolderFields);
      }
      if (sharedFolderFolderFields_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SharedFolderFolderFields);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FolderUid);
      }
      if (FolderType != global::Folder.FolderType.DefaultFolder) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FolderType);
      }
      if (ParentFolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentFolderUid);
      }
      if (FolderData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FolderData);
      }
      if (EncryptedFolderKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedFolderKey);
      }
      if (sharedFolderFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SharedFolderFields);
      }
      if (sharedFolderFolderFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SharedFolderFolderFields);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FolderRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderUid.Length != 0) {
        FolderUid = other.FolderUid;
      }
      if (other.FolderType != global::Folder.FolderType.DefaultFolder) {
        FolderType = other.FolderType;
      }
      if (other.ParentFolderUid.Length != 0) {
        ParentFolderUid = other.ParentFolderUid;
      }
      if (other.FolderData.Length != 0) {
        FolderData = other.FolderData;
      }
      if (other.EncryptedFolderKey.Length != 0) {
        EncryptedFolderKey = other.EncryptedFolderKey;
      }
      if (other.sharedFolderFields_ != null) {
        if (sharedFolderFields_ == null) {
          SharedFolderFields = new global::Folder.SharedFolderFields();
        }
        SharedFolderFields.MergeFrom(other.SharedFolderFields);
      }
      if (other.sharedFolderFolderFields_ != null) {
        if (sharedFolderFolderFields_ == null) {
          SharedFolderFolderFields = new global::Folder.SharedFolderFolderFields();
        }
        SharedFolderFolderFields.MergeFrom(other.SharedFolderFolderFields);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderUid = input.ReadBytes();
            break;
          }
          case 16: {
            FolderType = (global::Folder.FolderType) input.ReadEnum();
            break;
          }
          case 26: {
            ParentFolderUid = input.ReadBytes();
            break;
          }
          case 34: {
            FolderData = input.ReadBytes();
            break;
          }
          case 42: {
            EncryptedFolderKey = input.ReadBytes();
            break;
          }
          case 50: {
            if (sharedFolderFields_ == null) {
              SharedFolderFields = new global::Folder.SharedFolderFields();
            }
            input.ReadMessage(SharedFolderFields);
            break;
          }
          case 58: {
            if (sharedFolderFolderFields_ == null) {
              SharedFolderFolderFields = new global::Folder.SharedFolderFolderFields();
            }
            input.ReadMessage(SharedFolderFolderFields);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FolderResponse : pb::IMessage<FolderResponse> {
    private static readonly pb::MessageParser<FolderResponse> _parser = new pb::MessageParser<FolderResponse>(() => new FolderResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FolderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FolderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FolderResponse(FolderResponse other) : this() {
      folderUid_ = other.folderUid_;
      revision_ = other.revision_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FolderResponse Clone() {
      return new FolderResponse(this);
    }

    /// <summary>Field number for the "folderUid" field.</summary>
    public const int FolderUidFieldNumber = 1;
    private pb::ByteString folderUid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FolderUid {
      get { return folderUid_; }
      set {
        folderUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 2;
    private long revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FolderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FolderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderUid != other.FolderUid) return false;
      if (Revision != other.Revision) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderUid.Length != 0) hash ^= FolderUid.GetHashCode();
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderUid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FolderUid);
      }
      if (Revision != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Revision);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FolderUid);
      }
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FolderResponse other) {
      if (other == null) {
        return;
      }
      if (other.FolderUid.Length != 0) {
        FolderUid = other.FolderUid;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderUid = input.ReadBytes();
            break;
          }
          case 16: {
            Revision = input.ReadInt64();
            break;
          }
          case 26: {
            Status = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportFolderRecordRequest : pb::IMessage<ImportFolderRecordRequest> {
    private static readonly pb::MessageParser<ImportFolderRecordRequest> _parser = new pb::MessageParser<ImportFolderRecordRequest>(() => new ImportFolderRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportFolderRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFolderRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFolderRecordRequest(ImportFolderRecordRequest other) : this() {
      folderRequest_ = other.folderRequest_.Clone();
      recordRequest_ = other.recordRequest_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFolderRecordRequest Clone() {
      return new ImportFolderRecordRequest(this);
    }

    /// <summary>Field number for the "folderRequest" field.</summary>
    public const int FolderRequestFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Folder.FolderRequest> _repeated_folderRequest_codec
        = pb::FieldCodec.ForMessage(10, global::Folder.FolderRequest.Parser);
    private readonly pbc::RepeatedField<global::Folder.FolderRequest> folderRequest_ = new pbc::RepeatedField<global::Folder.FolderRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Folder.FolderRequest> FolderRequest {
      get { return folderRequest_; }
    }

    /// <summary>Field number for the "recordRequest" field.</summary>
    public const int RecordRequestFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Folder.RecordRequest> _repeated_recordRequest_codec
        = pb::FieldCodec.ForMessage(18, global::Folder.RecordRequest.Parser);
    private readonly pbc::RepeatedField<global::Folder.RecordRequest> recordRequest_ = new pbc::RepeatedField<global::Folder.RecordRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Folder.RecordRequest> RecordRequest {
      get { return recordRequest_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportFolderRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportFolderRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!folderRequest_.Equals(other.folderRequest_)) return false;
      if(!recordRequest_.Equals(other.recordRequest_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= folderRequest_.GetHashCode();
      hash ^= recordRequest_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      folderRequest_.WriteTo(output, _repeated_folderRequest_codec);
      recordRequest_.WriteTo(output, _repeated_recordRequest_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += folderRequest_.CalculateSize(_repeated_folderRequest_codec);
      size += recordRequest_.CalculateSize(_repeated_recordRequest_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportFolderRecordRequest other) {
      if (other == null) {
        return;
      }
      folderRequest_.Add(other.folderRequest_);
      recordRequest_.Add(other.recordRequest_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            folderRequest_.AddEntriesFrom(input, _repeated_folderRequest_codec);
            break;
          }
          case 18: {
            recordRequest_.AddEntriesFrom(input, _repeated_recordRequest_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportFolderRecordResponse : pb::IMessage<ImportFolderRecordResponse> {
    private static readonly pb::MessageParser<ImportFolderRecordResponse> _parser = new pb::MessageParser<ImportFolderRecordResponse>(() => new ImportFolderRecordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportFolderRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Folder.FolderReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFolderRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFolderRecordResponse(ImportFolderRecordResponse other) : this() {
      folderResponse_ = other.folderResponse_.Clone();
      recordResponse_ = other.recordResponse_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFolderRecordResponse Clone() {
      return new ImportFolderRecordResponse(this);
    }

    /// <summary>Field number for the "folderResponse" field.</summary>
    public const int FolderResponseFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Folder.FolderResponse> _repeated_folderResponse_codec
        = pb::FieldCodec.ForMessage(10, global::Folder.FolderResponse.Parser);
    private readonly pbc::RepeatedField<global::Folder.FolderResponse> folderResponse_ = new pbc::RepeatedField<global::Folder.FolderResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Folder.FolderResponse> FolderResponse {
      get { return folderResponse_; }
    }

    /// <summary>Field number for the "recordResponse" field.</summary>
    public const int RecordResponseFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Folder.RecordResponse> _repeated_recordResponse_codec
        = pb::FieldCodec.ForMessage(18, global::Folder.RecordResponse.Parser);
    private readonly pbc::RepeatedField<global::Folder.RecordResponse> recordResponse_ = new pbc::RepeatedField<global::Folder.RecordResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Folder.RecordResponse> RecordResponse {
      get { return recordResponse_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportFolderRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportFolderRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!folderResponse_.Equals(other.folderResponse_)) return false;
      if(!recordResponse_.Equals(other.recordResponse_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= folderResponse_.GetHashCode();
      hash ^= recordResponse_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      folderResponse_.WriteTo(output, _repeated_folderResponse_codec);
      recordResponse_.WriteTo(output, _repeated_recordResponse_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += folderResponse_.CalculateSize(_repeated_folderResponse_codec);
      size += recordResponse_.CalculateSize(_repeated_recordResponse_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportFolderRecordResponse other) {
      if (other == null) {
        return;
      }
      folderResponse_.Add(other.folderResponse_);
      recordResponse_.Add(other.recordResponse_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            folderResponse_.AddEntriesFrom(input, _repeated_folderResponse_codec);
            break;
          }
          case 18: {
            recordResponse_.AddEntriesFrom(input, _repeated_recordResponse_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
